#
# Module for tracking TOSCA Profiles generated from k8s swagger file
#
__author__ = "Chris Lauwers"
__copyright__ = "Copyright (c) 2021, Ubicity Corp."
__version__ = "0.0.1"
__email__ = "lauwers@ubicity.com"
__status__ = "Prototype"

# Logging support
import logging
logger = logging.getLogger(__name__)

# Directory support
import os
import os.path


class Profile(object):

    def __init__(self, name, version, prefix):
        """Constructor """

        # First, call superclass constructor
        super(Profile, self).__init__()

        # Initialize
        self.name = name
        self.version = version
        self.prefix = prefix
        self.dependencies = dict()


    def add_dependency(self, dependency_profile, dependency_prefix):
        """Add a profile on which this profile depends, and the namespace
        prefix to use when importing that profile. This method can be
        called multiple times, but we check for conflicting
        prefixes
        """
        try:
            if dependency_prefix != self.dependencies[dependency_profile]:
                logger.error("%s: prefix %s conflicts with previously configured %s",
                             dependency_profile, dependency_prefix,
                             self.dependencies[dependency_profile])
        except KeyError:
            self.dependencies[dependency_profile] = dependency_prefix


    def initialize(self, top, swagger_info):
        """Initialize a skeleton structure for this profile
        """

        # Create profile directory if it doesn't exist.
        self.create_profile_directory(top)

        # Prepare 'profile.yaml' file
        self.prepare_yaml_file(swagger_info)


    def create_profile_directory(self, top):
        # Create a path to the directory for this profile
        path = self.name.split('.')
        self.directory = os.path.join(top, *path)
        try:
            logger.debug("%s: create directory %s", self.name, self.directory)
            os.makedirs(self.directory, exist_ok=True)
        except Exception as e:
            logger.error("%s: %s", self.directory, str(e))
            return


    def prepare_yaml_file(self, swagger_info):
        """Create a 'profile.yaml' file in this profile's directory and
        initialize it."""
        
        # Open a profile.yaml file
        self.yaml_file = os.path.join(self.directory, 'profile.yaml')
        self.out = open(self.yaml_file, "w")

        # Emit tosca header
        self.out.write("tosca_definitions_version: tosca_simple_yaml_1_3\n\n")

        # Add comment
        self.out.write(
            "# This template was auto-generated by swagger2tosca\n\n"
        )
    
        # Write profile name
        self.out.write("namespace: %s\n\n" % self.name)

        # Write out swagger swagger_info
        self.emit_swagger_info(swagger_info)

        # Write out 'imports'
        self.emit_imports()
        

    def emit_swagger_info(self, swagger_info):
        """Write out information from the (required) Swagger Info Object. This
        object provides metadata about the API. The metadata can be
        used by the clients if needed. A swagger 2 Info Object has the
        following properties:

        title(string): Required. The title of the application.

        description(string): A short description of the
          application. GFM syntax can be used for rich text
          representation.

        termsOfService(string): The Terms of Service for the API.

        contact(Contact Object): The contact information for the
          exposed API.

        license(License Object): The license information for the
          exposed API.

        version(string): Required Provides the version of the
          application API (not to be confused with the specification
          version)

        """
        indent = ""
        self.emit_metadata(indent, swagger_info)
        self.out.write("\n")
        

    def emit_imports(self):
        """Write out import statements for all of the other profiles on which
        this profile depends
        """
        if not self.dependencies:
            return
        
        self.out.write("imports:\n")
        for name, prefix in self.dependencies.items():
            self.out.write("  - file: %s\n" % name)
            self.out.write("    prefix: %s\n" % prefix)
        self.out.write("\n")


    def emit_metadata(self, indent, data):
        self.out.write(
            "%smetadata:\n"
            % indent
        )
        indent = indent + '  '
        self.emit_key_value_data(indent, data)

    def emit_key_value_data(self, indent, data):
        for key, value in data.items():
            if isinstance(value, str):
                self.out.write("%s%s: %s\n" %
                               (indent, key, value))
            else:
                self.out.write("%s%s:\n" %
                               (indent, key))
                self.emit_key_value_data(indent+"  ", value)


        
