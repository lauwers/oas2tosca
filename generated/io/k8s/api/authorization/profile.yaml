tosca_definitions_version: tosca_simple_yaml_1_3

# This template was auto-generated by swagger2tosca

namespace: io.k8s.api.authorization

metadata:
  title: Kubernetes
  version: unversioned

imports:
  - file: io.k8s.apimachinery.pkg.apis.meta
    namespace_prefix: meta

node_types:

  LocalSubjectAccessReview:
    description: >-
      LocalSubjectAccessReview checks whether or not a user or group can
      perform an action in a given namespace. Having a namespace scoped
      resource makes it much easier to grant namespace scoped policy that
      includes permissions checking.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: LocalSubjectAccessReview
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard list metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec holds information about the request being evaluated.
          spec.namespace must be equal to the namespace you made the request
          against.  If empty, it is defaulted.
        required: true
        type: SubjectAccessReviewSpec
      status:
        description: >-
          Status is filled in by the server and indicates whether the request is
          allowed or not
        required: false
        type: SubjectAccessReviewStatus

  SelfSubjectAccessReview:
    description: >-
      SelfSubjectAccessReview checks whether or the current user can perform
      an action.  Not filling in a spec.namespace means "in all namespaces".
      Self is a special case, because users should always be able to check
      whether they can perform an action
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SelfSubjectAccessReview
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard list metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec holds information about the request being evaluated.  user and
          groups must be empty
        required: true
        type: SelfSubjectAccessReviewSpec
      status:
        description: >-
          Status is filled in by the server and indicates whether the request is
          allowed or not
        required: false
        type: SubjectAccessReviewStatus

  SelfSubjectRulesReview:
    description: >-
      SelfSubjectRulesReview enumerates the set of actions the current user
      can perform within a namespace. The returned list of actions may be
      incomplete depending on the server's authorization mode, and any
      errors experienced during the evaluation. SelfSubjectRulesReview
      should be used by UIs to show/hide actions, or to quickly let an end
      user reason about their permissions. It should NOT Be used by external
      systems to drive authorization decisions as this raises confused
      deputy, cache lifetime/revocation, and correctness concerns.
      SubjectAccessReview, and LocalAccessReview are the correct way to
      defer authorization decisions to the API server.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SelfSubjectRulesReview
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard list metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: Spec holds information about the request being evaluated.
        required: true
        type: SelfSubjectRulesReviewSpec
      status:
        description: >-
          Status is filled in by the server and indicates the set of actions a
          user can perform.
        required: false
        type: SubjectRulesReviewStatus

  SubjectAccessReview:
    description: >-
      SubjectAccessReview checks whether or not a user or group can perform
      an action.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SubjectAccessReview
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard list metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: Spec holds information about the request being evaluated
        required: true
        type: SubjectAccessReviewSpec
      status:
        description: >-
          Status is filled in by the server and indicates whether the request is
          allowed or not
        required: false
        type: SubjectAccessReviewStatus

data_types:

  NonResourceRule:
    description: >-
      NonResourceRule holds information that describes a rule for the non-
      resource
    properties:
      nonResourceURLs:
        description: >-
          NonResourceURLs is a set of partial urls that a user should have
          access to.  *s are allowed, but only as the full, final step in the
          path.  "*" means all.
        required: false
        type: list
        entry_schema:
          type: string
      verbs:
        description: >-
          Verb is a list of kubernetes non-resource API verbs, like: get, post,
          put, delete, patch, head, options.  "*" means all.
        required: true
        type: list
        entry_schema:
          type: string

  ResourceRule:
    description: >-
      ResourceRule is the list of actions the subject is allowed to perform
      on resources. The list ordering isn't significant, may contain
      duplicates, and possibly be incomplete.
    properties:
      apiGroups:
        description: >-
          APIGroups is the name of the APIGroup that contains the resources.  If
          multiple API groups are specified, any action requested against one of
          the enumerated resources in any API group will be allowed.  "*" means
          all.
        required: false
        type: list
        entry_schema:
          type: string
      resourceNames:
        description: >-
          ResourceNames is an optional white list of names that the rule applies
          to.  An empty set means that everything is allowed.  "*" means all.
        required: false
        type: list
        entry_schema:
          type: string
      resources:
        description: >-
          Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
          "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
        required: false
        type: list
        entry_schema:
          type: string
      verbs:
        description: >-
          Verb is a list of kubernetes resource API verbs, like: get, list,
          watch, create, update, delete, proxy.  "*" means all.
        required: true
        type: list
        entry_schema:
          type: string

  SubjectRulesReviewStatus:
    description: >-
      SubjectRulesReviewStatus contains the result of a rules check. This
      check can be incomplete depending on the set of authorizers the server
      is configured with and any errors experienced during evaluation.
      Because authorization rules are additive, if a rule appears in a list
      it's safe to assume the subject has that permission, even if that list
      is incomplete.
    properties:
      evaluationError:
        description: >-
          EvaluationError can appear in combination with Rules. It indicates an
          error occurred during rule evaluation, such as an authorizer that
          doesn't support rule evaluation, and that ResourceRules and/or
          NonResourceRules may be incomplete.
        required: false
        type: string
      incomplete:
        description: >-
          Incomplete is true when the rules returned by this call are
          incomplete. This is most commonly encountered when an authorizer, such
          as an external authorizer, doesn't support rules evaluation.
        required: true
        type: boolean
      nonResourceRules:
        description: >-
          NonResourceRules is the list of actions the subject is allowed to
          perform on non-resources. The list ordering isn't significant, may
          contain duplicates, and possibly be incomplete.
        required: true
        type: list
        entry_schema:
          type: NonResourceRule
      resourceRules:
        description: >-
          ResourceRules is the list of actions the subject is allowed to perform
          on resources. The list ordering isn't significant, may contain
          duplicates, and possibly be incomplete.
        required: true
        type: list
        entry_schema:
          type: ResourceRule

  SubjectAccessReviewStatus:
    description: SubjectAccessReviewStatus
    properties:
      allowed:
        description: >-
          Allowed is required. True if the action would be allowed, false
          otherwise.
        required: true
        type: boolean
      denied:
        description: >-
          Denied is optional. True if the action would be denied, otherwise
          false. If both allowed is false and denied is false, then the
          authorizer has no opinion on whether to authorize the action. Denied
          may not be true if Allowed is true.
        required: false
        type: boolean
      evaluationError:
        description: >-
          EvaluationError is an indication that some error occurred during the
          authorization check. It is entirely possible to get an error and be
          able to continue determine authorization status in spite of it. For
          instance, RBAC can be missing a role, but enough roles are still
          present and bound to reason about the request.
        required: false
        type: string
      reason:
        description: Reason is optional.  It indicates why a request was allowed or denied.
        required: false
        type: string

  NonResourceAttributes:
    description: >-
      NonResourceAttributes includes the authorization attributes available
      for non-resource requests to the Authorizer interface
    properties:
      path:
        description: Path is the URL path of the request
        required: false
        type: string
      verb:
        description: Verb is the standard HTTP verb
        required: false
        type: string

  ResourceAttributes:
    description: >-
      ResourceAttributes includes the authorization attributes available for
      resource requests to the Authorizer interface
    properties:
      group:
        description: Group is the API Group of the Resource.  "*" means all.
        required: false
        type: string
      name:
        description: >-
          Name is the name of the resource being requested for a "get" or
          deleted for a "delete". "" (empty) means all.
        required: false
        type: string
      namespace:
        description: >-
          Namespace is the namespace of the action being requested.  Currently,
          there is no distinction between no namespace and all namespaces ""
          (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty
          for cluster-scoped resources "" (empty) means "all" for namespace
          scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
        required: false
        type: string
      resource:
        description: Resource is one of the existing resource types.  "*" means all.
        required: false
        type: string
      subresource:
        description: Subresource is one of the existing resource types.  "" means none.
        required: false
        type: string
      verb:
        description: >-
          Verb is a kubernetes resource API verb, like: get, list, watch,
          create, update, delete, proxy.  "*" means all.
        required: false
        type: string
      version:
        description: Version is the API Version of the Resource.  "*" means all.
        required: false
        type: string

  SubjectAccessReviewSpec:
    description: >-
      SubjectAccessReviewSpec is a description of the access request.
      Exactly one of ResourceAuthorizationAttributes and
      NonResourceAuthorizationAttributes must be set
    properties:
      extra:
        description: >-
          Extra corresponds to the user.Info.GetExtra() method from the
          authenticator.  Since that is input to the authorizer it needs a
          reflection here.
        required: false
        type: map
        entry_schema:
          type: list
          entry_schema:
            type: string
      groups:
        description: >-
          Groups is the groups you're testing for.
        required: false
        type: list
        entry_schema:
          type: string
      nonResourceAttributes:
        description: >-
          NonResourceAttributes describes information for a non-resource access
          request
        required: false
        type: NonResourceAttributes
      resourceAttributes:
        description: >-
          ResourceAuthorizationAttributes describes information for a resource
          access request
        required: false
        type: ResourceAttributes
      uid:
        description: UID information about the requesting user.
        required: false
        type: string
      user:
        description: >-
          User is the user you're testing for. If you specify "User" but not
          "Groups", then is it interpreted as "What if User were not a member of
          any groups
        required: false
        type: string

  SelfSubjectAccessReviewSpec:
    description: >-
      SelfSubjectAccessReviewSpec is a description of the access request.
      Exactly one of ResourceAuthorizationAttributes and
      NonResourceAuthorizationAttributes must be set
    properties:
      nonResourceAttributes:
        description: >-
          NonResourceAttributes describes information for a non-resource access
          request
        required: false
        type: NonResourceAttributes
      resourceAttributes:
        description: >-
          ResourceAuthorizationAttributes describes information for a resource
          access request
        required: false
        type: ResourceAttributes

  SelfSubjectRulesReviewSpec:
    description: >-
      SelfSubjectRulesReviewSpec defines the specification for
      SelfSubjectRulesReview.
    properties:
      namespace:
        description: Namespace to evaluate rules for. Required.
        required: false
        type: string

