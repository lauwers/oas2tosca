tosca_definitions_version: tosca_simple_yaml_1_3

# This template was auto-generated by swagger2tosca

namespace: io.k8s.api.core

metadata:
  title: Kubernetes
  version: unversioned

imports:
  - file: io.k8s.apimachinery.pkg.apis.meta
    namespace_prefix: meta
  - file: io.k8s.apimachinery.pkg.api.resource
    namespace_prefix: resource
  - file: io.k8s.apimachinery.pkg.util.intstr
    namespace_prefix: intstr

node_types:

  Namespace:
    description: >-
      Namespace provides a scope for Names. Use of multiple namespaces is
      optional.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Namespace
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the behavior of the Namespace. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: NamespaceSpec
      status:
        description: >-
          Status describes the current status of a Namespace. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: NamespaceStatus

  Binding:
    description: >-
      Binding ties one object to another; for example, a pod is bound to a
      node by a scheduler. Deprecated in 1.7, please use the bindings
      subresource of pods instead.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Binding
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      target:
        description: The target object that you want to bind to the standard object.
        required: true
        type: ObjectReference

  ConfigMap:
    description: ConfigMap holds configuration data for pods to consume.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: ConfigMap
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      binaryData:
        description: >-
          BinaryData contains the binary data. Each key must consist of
          alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte
          sequences that are not in the UTF-8 range. The keys stored in
          BinaryData must not overlap with the ones in the Data field, this is
          enforced during validation process. Using this field will require
          1.10+ apiserver and kubelet.
        required: false
        type: map
        entry_schema:
          type: string
      data:
        description: >-
          Data contains the configuration data. Each key must consist of
          alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte
          sequences must use the BinaryData field. The keys stored in Data must
          not overlap with the keys in the BinaryData field, this is enforced
          during validation process.
        required: false
        type: map
        entry_schema:
          type: string
      immutable:
        description: >-
          Immutable, if set to true, ensures that data stored in the ConfigMap
          cannot be updated (only object metadata can be modified). If not set
          to true, the field can be modified at any time. Defaulted to nil.
        required: false
        type: boolean
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta

  Endpoints:
    description: >-
      Endpoints is a collection of endpoints that implement the actual service. Example:
      Name: "mysvc",
      Subsets: [
      {
      Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
      Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
      },
      {
      Addresses: [{"ip": "10.10.3.3"}],
      Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
      },
      ]
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Endpoints
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      subsets:
        description: >-
          The set of all endpoints is the union of all subsets. Addresses are
          placed into subsets according to the IPs they share. A single address
          with multiple ports, some of which are ready and some of which are not
          (because they come from different containers) will result in the
          address being displayed in different subsets for the different ports.
          No address will appear in both Addresses and NotReadyAddresses in the
          same subset. Sets of addresses and ports that comprise a service.
        required: false
        type: list
        entry_schema:
          type: EndpointSubset

  Event:
    description: >-
      Event is a report of an event somewhere in the cluster.  Events have a
      limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given
      Reason reflecting a consistent underlying trigger, or the continued
      existence of events with that Reason.  Events should be treated as
      informative, best-effort, supplemental data.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Event
        version: v1
    properties:
      action:
        description: What action was taken/failed regarding to the Regarding object.
        required: false
        type: string
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      count:
        description: The number of times this event has occurred.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      eventTime:
        description: Time when this Event was first observed.
        required: false
        type: meta:MicroTime
      firstTimestamp:
        description: >-
          The time at which the event was first recorded. (Time of server
          receipt is in TypeMeta.)
        required: false
        type: meta:Time
      involvedObject:
        description: The object that this event is about.
        required: true
        type: ObjectReference
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      lastTimestamp:
        description: >-
          The time at which the most recent occurrence of this event was
          recorded.
        required: false
        type: meta:Time
      message:
        description: A human-readable description of the status of this operation.
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: true
        type: meta:ObjectMeta
      reason:
        description: >-
          This should be a short, machine understandable string that gives the
          reason for the transition into the object's current status.
        required: false
        type: string
      related:
        description: Optional secondary object for more complex actions.
        required: false
        type: ObjectReference
      reportingComponent:
        description: >-
          Name of the controller that emitted this Event, e.g.
          `kubernetes.io/kubelet`.
        required: false
        type: string
      reportingInstance:
        description: >-
          ID of the controller instance, e.g. `kubelet-xyzf`.
        required: false
        type: string
      series:
        description: >-
          Data about the Event series this event represents or nil if it's a
          singleton Event.
        required: false
        type: EventSeries
      source:
        description: >-
          The component reporting this event. Should be a short machine
          understandable string.
        required: false
        type: EventSource
      type:
        description: >-
          Type of this event (Normal, Warning), new types could be added in the
          future
        required: false
        type: string

  LimitRange:
    description: >-
      LimitRange sets resource usage limits for each kind of resource in a
      Namespace.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: LimitRange
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the limits enforced. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: LimitRangeSpec

  PersistentVolumeClaim:
    description: >-
      PersistentVolumeClaim is a user's request for and claim to a
      persistent volume
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: PersistentVolumeClaim
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the desired characteristics of a volume requested by a
          pod author. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: false
        type: PersistentVolumeClaimSpec
      status:
        description: >-
          Status represents the current information/status of a persistent
          volume claim. Read-only. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: false
        type: PersistentVolumeClaimStatus

  Pod:
    description: >-
      Pod is a collection of containers that can run on a host. This
      resource is created by clients and scheduled onto hosts.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Pod
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Specification of the desired behavior of the pod. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: PodSpec
      status:
        description: >-
          Most recently observed status of the pod. This data may not be up to
          date. Populated by the system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: PodStatus

  PodTemplate:
    description: >-
      PodTemplate describes a template for creating copies of a predefined
      pod.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: PodTemplate
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      template:
        description: >-
          Template defines the pods that will be created from this pod template.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: PodTemplateSpec

  ReplicationController:
    description: >-
      ReplicationController represents the configuration of a replication
      controller.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: ReplicationController
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          If the Labels of a ReplicationController are empty, they are defaulted
          to be the same as the Pod(s) that the replication controller manages.
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the specification of the desired behavior of the
          replication controller. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ReplicationControllerSpec
      status:
        description: >-
          Status is the most recently observed status of the replication
          controller. This data may be out of date by some window of time.
          Populated by the system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ReplicationControllerStatus

  ResourceQuota:
    description: ResourceQuota sets aggregate quota restrictions enforced per namespace
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: ResourceQuota
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the desired quota.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ResourceQuotaSpec
      status:
        description: >-
          Status defines the actual enforced quota and its current usage.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ResourceQuotaStatus

  Secret:
    description: >-
      Secret holds secret data of a certain type. The total bytes of the
      values in the Data field must be less than MaxSecretSize bytes.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Secret
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      data:
        description: >-
          Data contains the secret data. Each key must consist of alphanumeric
          characters, '-', '_' or '.'. The serialized form of the secret data is
          a base64 encoded string, representing the arbitrary (possibly non-
          string) data value here. Described in
          https://tools.ietf.org/html/rfc4648#section-4
        required: false
        type: map
        entry_schema:
          type: string
      immutable:
        description: >-
          Immutable, if set to true, ensures that data stored in the Secret
          cannot be updated (only object metadata can be modified). If not set
          to true, the field can be modified at any time. Defaulted to nil.
        required: false
        type: boolean
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      stringData:
        description: >-
          stringData allows specifying non-binary secret data in string form. It
          is provided as a write-only input field for convenience. All keys and
          values are merged into the data field on write, overwriting any
          existing values. The stringData field is never output when reading
          from the API.
        required: false
        type: map
        entry_schema:
          type: string
      type:
        description: Used to facilitate programmatic handling of secret data.
        required: false
        type: string

  ServiceAccount:
    description: >-
      ServiceAccount binds together: * a name, understood by users, and
      perhaps by peripheral systems, for an identity * a principal that can
      be authenticated and authorized * a set of secrets
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: ServiceAccount
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      automountServiceAccountToken:
        description: >-
          AutomountServiceAccountToken indicates whether pods running as this
          service account should have an API token automatically mounted. Can be
          overridden at the pod level.
        required: false
        type: boolean
      imagePullSecrets:
        description: >-
          ImagePullSecrets is a list of references to secrets in the same
          namespace to use for pulling any images in pods that reference this
          ServiceAccount. ImagePullSecrets are distinct from Secrets because
          Secrets can be mounted in the pod, but ImagePullSecrets are only
          accessed by the kubelet. More info:
          https://kubernetes.io/docs/concepts/containers/images/#specifying-
          imagepullsecrets-on-a-pod
        required: false
        type: list
        entry_schema:
          type: LocalObjectReference
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      secrets:
        description: >-
          Secrets is the list of secrets allowed to be used by pods running
          using this ServiceAccount. More info:
          https://kubernetes.io/docs/concepts/configuration/secret
        required: false
        type: list
        entry_schema:
          type: ObjectReference

  Service:
    description: >-
      Service is a named abstraction of software service (for example,
      mysql) consisting of local port (for example 3306) that the proxy
      listens on, and the selector that determines which pods will answer
      requests sent through the proxy.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Service
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the behavior of a service.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ServiceSpec
      status:
        description: >-
          Most recently observed status of the service. Populated by the system.
          Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ServiceStatus

  Node:
    description: >-
      Node is a worker node in Kubernetes. Each node will have a unique
      identifier in the cache (i.e. in etcd).
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: Node
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the behavior of a node.
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: NodeSpec
      status:
        description: >-
          Most recently observed status of the node. Populated by the system.
          Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: NodeStatus

  PersistentVolume:
    description: >-
      PersistentVolume (PV) is a storage resource provisioned by an
      administrator. It is analogous to a node. More info:
      https://kubernetes.io/docs/concepts/storage/persistent-volumes
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: PersistentVolume
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines a specification of a persistent volume owned by the
          cluster. Provisioned by an administrator. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistent-volumes
        required: false
        type: PersistentVolumeSpec
      status:
        description: >-
          Status represents the current information/status for the persistent
          volume. Populated by the system. Read-only. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistent-volumes
        required: false
        type: PersistentVolumeStatus

data_types:

  NodeSelectorRequirement:
    description: >-
      A node selector requirement is a selector that contains values, a key,
      and an operator that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        required: true
        type: string
      operator:
        description: >-
          Represents a key's relationship to a set of values. Valid operators
          are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        required: true
        type: string
      values:
        description: >-
          An array of string values. If the operator is In or NotIn, the values
          array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the
          values array must have a single element, which will be interpreted as
          an integer. This array is replaced during a strategic merge patch.
        required: false
        type: list
        entry_schema:
          type: string

  NodeSelectorTerm:
    description: >-
      A null or empty node selector term matches no objects. The
      requirements of them are ANDed. The TopologySelectorTerm type
      implements a subset of the NodeSelectorTerm.
    properties:
      matchExpressions:
        description: >-
          A list of node selector requirements by node's labels.
        required: false
        type: list
        entry_schema:
          type: NodeSelectorRequirement
      matchFields:
        description: >-
          A list of node selector requirements by node's fields.
        required: false
        type: list
        entry_schema:
          type: NodeSelectorRequirement

  PreferredSchedulingTerm:
    description: >-
      An empty preferred scheduling term matches all objects with implicit
      weight 0 (i.e. it's a no-op). A null preferred scheduling term matches
      no objects (i.e. is also a no-op).
    properties:
      preference:
        description: A node selector term, associated with the corresponding weight.
        required: true
        type: NodeSelectorTerm
      weight:
        description: >-
          Weight associated with matching the corresponding nodeSelectorTerm, in
          the range 1-100.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  NodeSelector:
    description: >-
      A node selector represents the union of the results of one or more
      label queries over a set of nodes; that is, it represents the OR of
      the selectors represented by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        required: true
        type: list
        entry_schema:
          type: NodeSelectorTerm

  NodeAffinity:
    description: Node affinity is a group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each
          node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by
          iterating through the elements of this field and adding "weight" to
          the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
        required: false
        type: list
        entry_schema:
          type: PreferredSchedulingTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to an update), the system may or
          may not try to eventually evict the pod from its node.
        required: false
        type: NodeSelector

  PodAffinityTerm:
    description: >-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be co-located
      (affinity) or not co-located (anti-affinity) with, where co-located is
      defined as running on a node whose value of the label with key
      <topologyKey> matches that of any node on which a pod of the set of
      pods is running
    properties:
      labelSelector:
        description: A label query over a set of resources, in this case pods.
        required: false
        type: meta:LabelSelector
      namespaceSelector:
        description: >-
          A label query over the set of namespaces that the term applies to. The
          term is applied to the union of the namespaces selected by this field
          and the ones listed in the namespaces field. null selector and null or
          empty namespaces list means "this pod's namespace". An empty selector
          ({}) matches all namespaces. This field is beta-level and is only
          honored when PodAffinityNamespaceSelector feature is enabled.
        required: false
        type: meta:LabelSelector
      namespaces:
        description: >-
          namespaces specifies a static list of namespace names that the term
          applies to. The term is applied to the union of the namespaces listed
          in this field and the ones selected by namespaceSelector. null or
          empty namespaces list and null namespaceSelector means "this pod's
          namespace"
        required: false
        type: list
        entry_schema:
          type: string
      topologyKey:
        description: >-
          This pod should be co-located (affinity) or not co-located (anti-
          affinity) with the pods matching the labelSelector in the specified
          namespaces, where co-located is defined as running on a node whose
          value of the label with key topologyKey matches that of any node on
          which any of the selected pods is running. Empty topologyKey is not
          allowed.
        required: true
        type: string

  WeightedPodAffinityTerm:
    description: >-
      The weights of all of the matched WeightedPodAffinityTerm fields are
      added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        description: >-
          Required. A pod affinity term, associated with the corresponding
          weight.
        required: true
        type: PodAffinityTerm
      weight:
        description: >-
          weight associated with matching the corresponding podAffinityTerm, in
          the range 1-100.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  PodAffinity:
    description: Pod affinity is a group of inter pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          affinity expressions specified by this field, but it may choose a node
          that violates one or more of the expressions. The node that is most
          preferred is the one with the greatest sum of weights, i.e. for each
          node that meets all of the scheduling requirements (resource request,
          requiredDuringScheduling affinity expressions, etc.), compute a sum by
          iterating through the elements of this field and adding "weight" to
          the sum if the node has pods which matches the corresponding
          podAffinityTerm; the node(s) with the highest sum are the most
          preferred.
        required: false
        type: list
        entry_schema:
          type: WeightedPodAffinityTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node. If the
          affinity requirements specified by this field cease to be met at some
          point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to
          each podAffinityTerm are intersected, i.e. all terms must be
          satisfied.
        required: false
        type: list
        entry_schema:
          type: PodAffinityTerm

  PodAntiAffinity:
    description: >-
      Pod anti affinity is a group of inter pod anti affinity scheduling
      rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: >-
          The scheduler will prefer to schedule pods to nodes that satisfy the
          anti-affinity expressions specified by this field, but it may choose a
          node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e. for
          each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and
          adding "weight" to the sum if the node has pods which matches the
          corresponding podAffinityTerm; the node(s) with the highest sum are
          the most preferred.
        required: false
        type: list
        entry_schema:
          type: WeightedPodAffinityTerm
      requiredDuringSchedulingIgnoredDuringExecution:
        description: >-
          If the anti-affinity requirements specified by this field are not met
          at scheduling time, the pod will not be scheduled onto the node. If
          the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update),
          the system may or may not try to eventually evict the pod from its
          node. When there are multiple elements, the lists of nodes
          corresponding to each podAffinityTerm are intersected, i.e. all terms
          must be satisfied.
        required: false
        type: list
        entry_schema:
          type: PodAffinityTerm

  Affinity:
    description: Affinity is a group of affinity scheduling rules.
    properties:
      nodeAffinity:
        description: Describes node affinity scheduling rules for the pod.
        required: false
        type: NodeAffinity
      podAffinity:
        description: >-
          Describes pod affinity scheduling rules (e.g. co-locate this pod in
          the same node, zone, etc. as some other pod(s)).
        required: false
        type: PodAffinity
      podAntiAffinity:
        description: >-
          Describes pod anti-affinity scheduling rules (e.g. avoid putting this
          pod in the same node, zone, etc. as some other pod(s)).
        required: false
        type: PodAntiAffinity

  ConfigMapKeySelector:
    description: Selects a key from a ConfigMap.
    properties:
      key:
        description: The key to select.
        required: true
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the ConfigMap or its key must be defined
        required: false
        type: boolean

  ObjectFieldSelector:
    description: ObjectFieldSelector selects an APIVersioned field of an object.
    properties:
      apiVersion:
        description: >-
          Version of the schema the FieldPath is written in terms of, defaults
          to "v1".
        required: false
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        required: true
        type: string

  ResourceFieldSelector:
    description: >-
      ResourceFieldSelector represents container resources (cpu, memory) and
      their output format
    properties:
      containerName:
        description: >-
          Container name: required for volumes, optional for env vars
        required: false
        type: string
      divisor:
        description: Specifies the output format of the exposed resources, defaults to "1"
        required: false
        type: resource:Quantity
      resource:
        description: >-
          Required: resource to select
        required: true
        type: string

  SecretKeySelector:
    description: SecretKeySelector selects a key of a Secret.
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret key.
        required: true
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the Secret or its key must be defined
        required: false
        type: boolean

  EnvVarSource:
    description: EnvVarSource represents a source for the value of an EnvVar.
    properties:
      configMapKeyRef:
        description: Selects a key of a ConfigMap.
        required: false
        type: ConfigMapKeySelector
      fieldRef:
        description: >-
          Selects a field of the pod: supports metadata.name,
          metadata.namespace, `metadata.labels['<KEY>']`,
          `metadata.annotations['<KEY>']`, spec.nodeName,
          spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
        required: false
        type: ObjectFieldSelector
      resourceFieldRef:
        description: >-
          Selects a resource of the container: only resources limits and
          requests (limits.cpu, limits.memory, limits.ephemeral-storage,
          requests.cpu, requests.memory and requests.ephemeral-storage) are
          currently supported.
        required: false
        type: ResourceFieldSelector
      secretKeyRef:
        description: >-
          Selects a key of a secret in the pod's namespace
        required: false
        type: SecretKeySelector

  EnvVar:
    description: EnvVar represents an environment variable present in a Container.
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        required: true
        type: string
      value:
        description: >-
          Variable references $(VAR_NAME) are expanded using the previously
          defined environment variables in the container and any service
          environment variables. If a variable cannot be resolved, the reference
          in the input string will be unchanged. Double $$ are reduced to a
          single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped
          references will never be expanded, regardless of whether the variable
          exists or not. Defaults to "".
        required: false
        type: string
      valueFrom:
        description: >-
          Source for the environment variable's value. Cannot be used if value
          is not empty.
        required: false
        type: EnvVarSource

  ConfigMapEnvSource:
    description: >-
      ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
      
      The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the ConfigMap must be defined
        required: false
        type: boolean

  SecretEnvSource:
    description: >-
      SecretEnvSource selects a Secret to populate the environment variables with.
      
      The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the Secret must be defined
        required: false
        type: boolean

  EnvFromSource:
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        description: The ConfigMap to select from
        required: false
        type: ConfigMapEnvSource
      prefix:
        description: >-
          An optional identifier to prepend to each key in the ConfigMap. Must
          be a C_IDENTIFIER.
        required: false
        type: string
      secretRef:
        description: The Secret to select from
        required: false
        type: SecretEnvSource

  ExecAction:
    description: ExecAction describes a "run in container" action.
    properties:
      command:
        description: >-
          Command is the command line to execute inside the container, the
          working directory for the command  is root ('/') in the container's
          filesystem. The command is simply exec'd, it is not run inside a
          shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell. Exit status of
          0 is treated as live/healthy and non-zero is unhealthy.
        required: false
        type: list
        entry_schema:
          type: string

  HTTPHeader:
    description: HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        description: The header field name
        required: true
        type: string
      value:
        description: The header field value
        required: true
        type: string

  HTTPGetAction:
    description: HTTPGetAction describes an action based on HTTP Get requests.
    properties:
      host:
        description: >-
          Host name to connect to, defaults to the pod IP. You probably want to
          set "Host" in httpHeaders instead.
        required: false
        type: string
      httpHeaders:
        description: Custom headers to set in the request. HTTP allows repeated headers.
        required: false
        type: list
        entry_schema:
          type: HTTPHeader
      path:
        description: Path to access on the HTTP server.
        required: false
        type: string
      port:
        description: >-
          Name or number of the port to access on the container. Number must be
          in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        required: true
        type: intstr:IntOrString
      scheme:
        description: Scheme to use for connecting to the host. Defaults to HTTP.
        required: false
        type: string

  TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: >-
          Optional: Host name to connect to, defaults to the pod IP.
        required: false
        type: string
      port:
        description: >-
          Number or name of the port to access on the container. Number must be
          in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        required: true
        type: intstr:IntOrString

  Handler:
    description: Handler defines a specific action that should be taken
    properties:
      exec:
        description: >-
          One and only one of the following should be specified. Exec specifies
          the action to take.
        required: false
        type: ExecAction
      httpGet:
        description: HTTPGet specifies the http request to perform.
        required: false
        type: HTTPGetAction
      tcpSocket:
        description: >-
          TCPSocket specifies an action involving a TCP port. TCP hooks not yet
          supported
        required: false
        type: TCPSocketAction

  Lifecycle:
    description: >-
      Lifecycle describes actions that the management system should take in
      response to container lifecycle events. For the PostStart and PreStop
      lifecycle handlers, management of the container blocks until the
      action is complete, unless the container process fails, in which case
      the handler is aborted.
    properties:
      postStart:
        description: >-
          PostStart is called immediately after a container is created. If the
          handler fails, the container is terminated and restarted according to
          its restart policy. Other management of the container blocks until the
          hook completes. More info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-
          hooks/#container-hooks
        required: false
        type: Handler
      preStop:
        description: >-
          PreStop is called immediately before a container is terminated due to
          an API request or management event such as liveness/startup probe
          failure, preemption, resource contention, etc. The handler is not
          called if the container crashes or exits. The reason for termination
          is passed to the handler. The Pod's termination grace period countdown
          begins before the PreStop hooked is executed. Regardless of the
          outcome of the handler, the container will eventually terminate within
          the Pod's termination grace period. Other management of the container
          blocks until the hook completes or until the termination grace period
          is reached. More info:
          https://kubernetes.io/docs/concepts/containers/container-lifecycle-
          hooks/#container-hooks
        required: false
        type: Handler

  Probe:
    description: >-
      Probe describes a health check to be performed against a container to
      determine whether it is alive or ready to receive traffic.
    properties:
      exec:
        description: >-
          One and only one of the following should be specified. Exec specifies
          the action to take.
        required: false
        type: ExecAction
      failureThreshold:
        description: >-
          Minimum consecutive failures for the probe to be considered failed
          after having succeeded. Defaults to 3. Minimum value is 1.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      httpGet:
        description: HTTPGet specifies the http request to perform.
        required: false
        type: HTTPGetAction
      initialDelaySeconds:
        description: >-
          Number of seconds after the container has started before liveness
          probes are initiated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#container-probes
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      periodSeconds:
        description: >-
          How often (in seconds) to perform the probe. Default to 10 seconds.
          Minimum value is 1.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      successThreshold:
        description: >-
          Minimum consecutive successes for the probe to be considered
          successful after having failed. Defaults to 1. Must be 1 for liveness
          and startup. Minimum value is 1.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      tcpSocket:
        description: >-
          TCPSocket specifies an action involving a TCP port. TCP hooks not yet
          supported
        required: false
        type: TCPSocketAction
      terminationGracePeriodSeconds:
        description: >-
          Optional duration in seconds the pod needs to terminate gracefully
          upon probe failure. The grace period is the duration in seconds after
          the processes running in the pod are sent a termination signal and the
          time when the processes are forcibly halted with a kill signal. Set
          this value longer than the expected cleanup time for your process. If
          this value is nil, the pod's terminationGracePeriodSeconds will be
          used. Otherwise, this value overrides the value provided by the pod
          spec. Value must be non-negative integer. The value zero indicates
          stop immediately via the kill signal (no opportunity to shut down).
          This is a beta field and requires enabling ProbeTerminationGracePeriod
          feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
          is used if unset.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      timeoutSeconds:
        description: >-
          Number of seconds after which the probe times out. Defaults to 1
          second. Minimum value is 1. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#container-probes
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  ContainerPort:
    description: ContainerPort represents a network port in a single container.
    properties:
      containerPort:
        description: >-
          Number of port to expose on the pod's IP address. This must be a valid
          port number, 0 < x < 65536.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      hostIP:
        description: What host IP to bind the external port to.
        required: false
        type: string
      hostPort:
        description: >-
          Number of port to expose on the host. If specified, this must be a
          valid port number, 0 < x < 65536. If HostNetwork is specified, this
          must match ContainerPort. Most containers do not need this.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      name:
        description: >-
          If specified, this must be an IANA_SVC_NAME and unique within the pod.
          Each named port in a pod must have a unique name. Name for the port
          that can be referred to by services.
        required: false
        type: string
      protocol:
        description: Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
        required: false
        type: string

  ResourceRequirements:
    description: ResourceRequirements describes the compute resource requirements.
    properties:
      limits:
        description: >-
          Limits describes the maximum amount of compute resources allowed. More
          info: https://kubernetes.io/docs/concepts/configuration/manage-
          resources-containers/
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      requests:
        description: >-
          Requests describes the minimum amount of compute resources required.
          If Requests is omitted for a container, it defaults to Limits if that
          is explicitly specified, otherwise to an implementation-defined value.
          More info: https://kubernetes.io/docs/concepts/configuration/manage-
          resources-containers/
        required: false
        type: map
        entry_schema:
          type: resource:Quantity

  Capabilities:
    description: Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: Added capabilities
        required: false
        type: list
        entry_schema:
          type: string
      drop:
        description: Removed capabilities
        required: false
        type: list
        entry_schema:
          type: string

  SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: Level is SELinux level label that applies to the container.
        required: false
        type: string
      role:
        description: Role is a SELinux role label that applies to the container.
        required: false
        type: string
      type:
        description: Type is a SELinux type label that applies to the container.
        required: false
        type: string
      user:
        description: User is a SELinux user label that applies to the container.
        required: false
        type: string

  SeccompProfile:
    description: >-
      SeccompProfile defines a pod/container's seccomp profile settings.
      Only one profile source may be set.
    properties:
      localhostProfile:
        description: >-
          localhostProfile indicates a profile defined in a file on the node
          should be used. The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured
          seccomp profile location. Must only be set if type is "Localhost".
        required: false
        type: string
      type:
        description: >-
          type indicates which kind of seccomp profile will be applied. Valid options are:
          
          Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
        required: true
        type: string

  WindowsSecurityContextOptions:
    description: >-
      WindowsSecurityContextOptions contain Windows-specific options and
      credentials.
    properties:
      gmsaCredentialSpec:
        description: >-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents
          of the GMSA credential spec named by the GMSACredentialSpecName field.
        required: false
        type: string
      gmsaCredentialSpecName:
        description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
        required: false
        type: string
      hostProcess:
        description: >-
          HostProcess determines if a container should be run as a 'Host
          Process' container. This field is alpha-level and will only be honored
          by components that enable the WindowsHostProcessContainers feature
          flag. Setting this field without the feature flag will result in
          errors when validating the Pod. All of a Pod's containers must have
          the same effective HostProcess value (it is not allowed to have a mix
          of HostProcess containers and non-HostProcess containers).  In
          addition, if HostProcess is true then HostNetwork must also be set to
          true.
        required: false
        type: boolean
      runAsUserName:
        description: >-
          The UserName in Windows to run the entrypoint of the container
          process. Defaults to the user specified in image metadata if
          unspecified. May also be set in PodSecurityContext. If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence.
        required: false
        type: string

  SecurityContext:
    description: >-
      SecurityContext holds security configuration that will be applied to a
      container. Some fields are present in both SecurityContext and
      PodSecurityContext.  When both are set, the values in SecurityContext
      take precedence.
    properties:
      allowPrivilegeEscalation:
        description: >-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if the
          no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is: 1) run
          as Privileged 2) has CAP_SYS_ADMIN
        required: false
        type: boolean
      capabilities:
        description: >-
          The capabilities to add/drop when running containers. Defaults to the
          default set of capabilities granted by the container runtime.
        required: false
        type: Capabilities
      privileged:
        description: >-
          Run container in privileged mode. Processes in privileged containers
          are essentially equivalent to root on the host. Defaults to false.
        required: false
        type: boolean
      procMount:
        description: >-
          procMount denotes the type of proc mount to use for the containers.
          The default is DefaultProcMount which uses the container runtime
          defaults for readonly paths and masked paths. This requires the
          ProcMountType feature flag to be enabled.
        required: false
        type: string
      readOnlyRootFilesystem:
        description: >-
          Whether this container has a read-only root filesystem. Default is
          false.
        required: false
        type: boolean
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime
          default if unset. May also be set in PodSecurityContext.  If set in
          both SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the
          Kubelet will validate the image at runtime to ensure that it does not
          run as UID 0 (root) and fail to start the container if it does. If
          unset or false, no such validation will be performed. May also be set
          in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        required: false
        type: boolean
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to
          user specified in image metadata if unspecified. May also be set in
          PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to the container. If unspecified,
          the container runtime will allocate a random SELinux context for each
          container.  May also be set in PodSecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence.
        required: false
        type: SELinuxOptions
      seccompProfile:
        description: >-
          The seccomp options to use by this container. If seccomp options are
          provided at both the pod & container level, the container options
          override the pod options.
        required: false
        type: SeccompProfile
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If
          unspecified, the options from the PodSecurityContext will be used. If
          set in both SecurityContext and PodSecurityContext, the value
          specified in SecurityContext takes precedence.
        required: false
        type: WindowsSecurityContextOptions

  VolumeDevice:
    description: >-
      volumeDevice describes a mapping of a raw block device within a
      container.
    properties:
      devicePath:
        description: >-
          devicePath is the path inside of the container that the device will be
          mapped to.
        required: true
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        required: true
        type: string

  VolumeMount:
    description: VolumeMount describes a mounting of a Volume within a container.
    properties:
      mountPath:
        description: >-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        required: true
        type: string
      mountPropagation:
        description: >-
          mountPropagation determines how mounts are propagated from the host to
          container and the other way around. When not set, MountPropagationNone
          is used. This field is beta in 1.10.
        required: false
        type: string
      name:
        description: This must match the Name of a Volume.
        required: true
        type: string
      readOnly:
        description: >-
          Mounted read-only if true, read-write otherwise (false or
          unspecified). Defaults to false.
        required: false
        type: boolean
      subPath:
        description: >-
          Path within the volume from which the container's volume should be
          mounted. Defaults to "" (volume's root).
        required: false
        type: string
      subPathExpr:
        description: >-
          Expanded path within the volume from which the container's volume
          should be mounted. Behaves similarly to SubPath but environment
          variable references $(VAR_NAME) are expanded using the container's
          environment. Defaults to "" (volume's root). SubPathExpr and SubPath
          are mutually exclusive.
        required: false
        type: string

  Container:
    description: A single application container that you want to run within a pod.
    properties:
      args:
        description: >-
          Arguments to the entrypoint. The docker image's CMD is used if this is
          not provided. Variable references $(VAR_NAME) are expanded using the
          container's environment. If a variable cannot be resolved, the
          reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped
          references will never be expanded, regardless of whether the variable
          exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-
          command-argument-container/#running-a-command-in-a-shell
        required: false
        type: list
        entry_schema:
          type: string
      command:
        description: >-
          Entrypoint array. Not executed within a shell. The docker image's
          ENTRYPOINT is used if this is not provided. Variable references
          $(VAR_NAME) are expanded using the container's environment. If a
          variable cannot be resolved, the reference in the input string will be
          unchanged. Double $$ are reduced to a single $, which allows for
          escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
          string literal "$(VAR_NAME)". Escaped references will never be
          expanded, regardless of whether the variable exists or not. Cannot be
          updated. More info: https://kubernetes.io/docs/tasks/inject-data-
          application/define-command-argument-container/#running-a-command-in-a-
          shell
        required: false
        type: list
        entry_schema:
          type: string
      env:
        description: >-
          List of environment variables to set in the container. Cannot be
          updated.
        required: false
        type: list
        entry_schema:
          type: EnvVar
      envFrom:
        description: >-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid
          keys will be reported as an event when the container is starting. When
          a key exists in multiple sources, the value associated with the last
          source will take precedence. Values defined by an Env with a duplicate
          key will take precedence. Cannot be updated.
        required: false
        type: list
        entry_schema:
          type: EnvFromSource
      image:
        description: >-
          Docker image name. More info:
          https://kubernetes.io/docs/concepts/containers/images This field is
          optional to allow higher level config management to default or
          override container images in workload controllers like Deployments and
          StatefulSets.
        required: false
        type: string
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to
          Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
          be updated. More info:
          https://kubernetes.io/docs/concepts/containers/images#updating-images
        required: false
        type: string
      lifecycle:
        description: >-
          Actions that the management system should take in response to
          container lifecycle events. Cannot be updated.
        required: false
        type: Lifecycle
      livenessProbe:
        description: >-
          Periodic probe of container liveness. Container will be restarted if
          the probe fails. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#container-probes
        required: false
        type: Probe
      name:
        description: >-
          Name of the container specified as a DNS_LABEL. Each container in a
          pod must have a unique name (DNS_LABEL). Cannot be updated.
        required: true
        type: string
      ports:
        description: >-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port
          here DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network. Cannot be updated.
        required: false
        type: list
        entry_schema:
          type: ContainerPort
        metadata:
          x-kubernetes-list-map-keys: ['containerPort', 'protocol']
          x-kubernetes-list-type: map
      readinessProbe:
        description: >-
          Periodic probe of container service readiness. Container will be
          removed from service endpoints if the probe fails. Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#container-probes
        required: false
        type: Probe
      resources:
        description: >-
          Compute Resources required by this container. Cannot be updated. More
          info: https://kubernetes.io/docs/concepts/configuration/manage-
          resources-containers/
        required: false
        type: ResourceRequirements
      securityContext:
        description: >-
          SecurityContext defines the security options the container should be
          run with. If set, the fields of SecurityContext override the
          equivalent fields of PodSecurityContext. More info:
          https://kubernetes.io/docs/tasks/configure-pod-container/security-
          context/
        required: false
        type: SecurityContext
      startupProbe:
        description: >-
          StartupProbe indicates that the Pod has successfully initialized. If
          specified, no other probes are executed until this completes
          successfully. If this probe fails, the Pod will be restarted, just as
          if the livenessProbe failed. This can be used to provide different
          probe parameters at the beginning of a Pod's lifecycle, when it might
          take a long time to load data or warm a cache, than during steady-
          state operation. This cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#container-probes
        required: false
        type: Probe
      stdin:
        description: >-
          Whether this container should allocate a buffer for stdin in the
          container runtime. If this is not set, reads from stdin in the
          container will always result in EOF. Default is false.
        required: false
        type: boolean
      stdinOnce:
        description: >-
          Whether the container runtime should close the stdin channel after it
          has been opened by a single attach. When stdin is true the stdin
          stream will remain open across multiple attach sessions. If stdinOnce
          is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data
          until the client disconnects, at which time stdin is closed and
          remains closed until the container is restarted. If this flag is
          false, a container processes that reads from stdin will never receive
          an EOF. Default is false
        required: false
        type: boolean
      terminationMessagePath:
        description: >-
          Optional: Path at which the file to which the container's termination
          message will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an
          assertion failure message. Will be truncated by the node if greater
          than 4096 bytes. The total message length across all containers will
          be limited to 12kb. Defaults to /dev/termination-log. Cannot be
          updated.
        required: false
        type: string
      terminationMessagePolicy:
        description: >-
          Indicate how the termination message should be populated. File will
          use the contents of terminationMessagePath to populate the container
          status message on both success and failure. FallbackToLogsOnError will
          use the last chunk of container log output if the termination message
          file is empty and the container exited with an error. The log output
          is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults
          to File. Cannot be updated.
        required: false
        type: string
      tty:
        description: >-
          Whether this container should allocate a TTY for itself, also requires
          'stdin' to be true. Default is false.
        required: false
        type: boolean
      volumeDevices:
        description: >-
          volumeDevices is the list of block devices to be used by the
          container.
        required: false
        type: list
        entry_schema:
          type: VolumeDevice
      volumeMounts:
        description: >-
          Pod volumes to mount into the container's filesystem. Cannot be
          updated.
        required: false
        type: list
        entry_schema:
          type: VolumeMount
      workingDir:
        description: >-
          Container's working directory. If not specified, the container
          runtime's default will be used, which might be configured in the
          container image. Cannot be updated.
        required: false
        type: string

  PodDNSConfigOption:
    description: PodDNSConfigOption defines DNS resolver options of a pod.
    properties:
      name:
        description: Required.
        required: false
        type: string
      value:
        required: false
        type: string

  PodDNSConfig:
    description: >-
      PodDNSConfig defines the DNS parameters of a pod in addition to those
      generated from DNSPolicy.
    properties:
      nameservers:
        description: >-
          A list of DNS name server IP addresses. This will be appended to the
          base nameservers generated from DNSPolicy. Duplicated nameservers will
          be removed.
        required: false
        type: list
        entry_schema:
          type: string
      options:
        description: >-
          A list of DNS resolver options. This will be merged with the base
          options generated from DNSPolicy. Duplicated entries will be removed.
          Resolution options given in Options will override those that appear in
          the base DNSPolicy.
        required: false
        type: list
        entry_schema:
          type: PodDNSConfigOption
      searches:
        description: >-
          A list of DNS search domains for host-name lookup. This will be
          appended to the base search paths generated from DNSPolicy. Duplicated
          search paths will be removed.
        required: false
        type: list
        entry_schema:
          type: string

  EphemeralContainer:
    description: >-
      An EphemeralContainer is a container that may be added temporarily to
      an existing pod for user-initiated activities such as debugging.
      Ephemeral containers have no resource or scheduling guarantees, and
      they will not be restarted when they exit or when a pod is removed or
      restarted. If an ephemeral container causes a pod to exceed its
      resource allocation, the pod may be evicted. Ephemeral containers may
      not be added by directly updating the pod spec. They must be added via
      the pod's ephemeralcontainers subresource, and they will appear in the
      pod spec once added. This is an alpha feature enabled by the
      EphemeralContainers feature flag.
    properties:
      args:
        description: >-
          Arguments to the entrypoint. The docker image's CMD is used if this is
          not provided. Variable references $(VAR_NAME) are expanded using the
          container's environment. If a variable cannot be resolved, the
          reference in the input string will be unchanged. Double $$ are reduced
          to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
          "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped
          references will never be expanded, regardless of whether the variable
          exists or not. Cannot be updated. More info:
          https://kubernetes.io/docs/tasks/inject-data-application/define-
          command-argument-container/#running-a-command-in-a-shell
        required: false
        type: list
        entry_schema:
          type: string
      command:
        description: >-
          Entrypoint array. Not executed within a shell. The docker image's
          ENTRYPOINT is used if this is not provided. Variable references
          $(VAR_NAME) are expanded using the container's environment. If a
          variable cannot be resolved, the reference in the input string will be
          unchanged. Double $$ are reduced to a single $, which allows for
          escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the
          string literal "$(VAR_NAME)". Escaped references will never be
          expanded, regardless of whether the variable exists or not. Cannot be
          updated. More info: https://kubernetes.io/docs/tasks/inject-data-
          application/define-command-argument-container/#running-a-command-in-a-
          shell
        required: false
        type: list
        entry_schema:
          type: string
      env:
        description: >-
          List of environment variables to set in the container. Cannot be
          updated.
        required: false
        type: list
        entry_schema:
          type: EnvVar
      envFrom:
        description: >-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid
          keys will be reported as an event when the container is starting. When
          a key exists in multiple sources, the value associated with the last
          source will take precedence. Values defined by an Env with a duplicate
          key will take precedence. Cannot be updated.
        required: false
        type: list
        entry_schema:
          type: EnvFromSource
      image:
        description: >-
          Docker image name. More info:
          https://kubernetes.io/docs/concepts/containers/images
        required: false
        type: string
      imagePullPolicy:
        description: >-
          Image pull policy. One of Always, Never, IfNotPresent. Defaults to
          Always if :latest tag is specified, or IfNotPresent otherwise. Cannot
          be updated. More info:
          https://kubernetes.io/docs/concepts/containers/images#updating-images
        required: false
        type: string
      lifecycle:
        description: Lifecycle is not allowed for ephemeral containers.
        required: false
        type: Lifecycle
      livenessProbe:
        description: Probes are not allowed for ephemeral containers.
        required: false
        type: Probe
      name:
        description: >-
          Name of the ephemeral container specified as a DNS_LABEL. This name
          must be unique among all containers, init containers and ephemeral
          containers.
        required: true
        type: string
      ports:
        description: Ports are not allowed for ephemeral containers.
        required: false
        type: list
        entry_schema:
          type: ContainerPort
      readinessProbe:
        description: Probes are not allowed for ephemeral containers.
        required: false
        type: Probe
      resources:
        description: >-
          Resources are not allowed for ephemeral containers. Ephemeral
          containers use spare resources already allocated to the pod.
        required: false
        type: ResourceRequirements
      securityContext:
        description: >-
          Optional: SecurityContext defines the security options the ephemeral
          container should be run with. If set, the fields of SecurityContext
          override the equivalent fields of PodSecurityContext.
        required: false
        type: SecurityContext
      startupProbe:
        description: Probes are not allowed for ephemeral containers.
        required: false
        type: Probe
      stdin:
        description: >-
          Whether this container should allocate a buffer for stdin in the
          container runtime. If this is not set, reads from stdin in the
          container will always result in EOF. Default is false.
        required: false
        type: boolean
      stdinOnce:
        description: >-
          Whether the container runtime should close the stdin channel after it
          has been opened by a single attach. When stdin is true the stdin
          stream will remain open across multiple attach sessions. If stdinOnce
          is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data
          until the client disconnects, at which time stdin is closed and
          remains closed until the container is restarted. If this flag is
          false, a container processes that reads from stdin will never receive
          an EOF. Default is false
        required: false
        type: boolean
      targetContainerName:
        description: >-
          If set, the name of the container from PodSpec that this ephemeral
          container targets. The ephemeral container will be run in the
          namespaces (IPC, PID, etc) of this container. If not set then the
          ephemeral container is run in whatever namespaces are shared for the
          pod. Note that the container runtime must support this feature.
        required: false
        type: string
      terminationMessagePath:
        description: >-
          Optional: Path at which the file to which the container's termination
          message will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an
          assertion failure message. Will be truncated by the node if greater
          than 4096 bytes. The total message length across all containers will
          be limited to 12kb. Defaults to /dev/termination-log. Cannot be
          updated.
        required: false
        type: string
      terminationMessagePolicy:
        description: >-
          Indicate how the termination message should be populated. File will
          use the contents of terminationMessagePath to populate the container
          status message on both success and failure. FallbackToLogsOnError will
          use the last chunk of container log output if the termination message
          file is empty and the container exited with an error. The log output
          is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults
          to File. Cannot be updated.
        required: false
        type: string
      tty:
        description: >-
          Whether this container should allocate a TTY for itself, also requires
          'stdin' to be true. Default is false.
        required: false
        type: boolean
      volumeDevices:
        description: >-
          volumeDevices is the list of block devices to be used by the
          container.
        required: false
        type: list
        entry_schema:
          type: VolumeDevice
      volumeMounts:
        description: >-
          Pod volumes to mount into the container's filesystem. Cannot be
          updated.
        required: false
        type: list
        entry_schema:
          type: VolumeMount
      workingDir:
        description: >-
          Container's working directory. If not specified, the container
          runtime's default will be used, which might be configured in the
          container image. Cannot be updated.
        required: false
        type: string

  HostAlias:
    description: >-
      HostAlias holds the mapping between IP and hostnames that will be
      injected as an entry in the pod's hosts file.
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        required: false
        type: list
        entry_schema:
          type: string
      ip:
        description: IP address of the host file entry.
        required: false
        type: string

  LocalObjectReference:
    description: >-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
    properties:
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string

  PodReadinessGate:
    description: PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        description: >-
          ConditionType refers to a condition in the pod's condition list with
          matching type.
        required: true
        type: string

  Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        required: true
        type: string
      value:
        description: Value of a property to set
        required: true
        type: string

  PodSecurityContext:
    description: >-
      PodSecurityContext holds pod-level security attributes and common
      container settings. Some fields are also present in
      container.securityContext.  Field values of container.securityContext
      take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        description: >-
          A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
          
          1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
          
          If unset, the Kubelet will not modify the ownership and permissions of any volume.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      fsGroupChangePolicy:
        description: >-
          fsGroupChangePolicy defines behavior of changing ownership and
          permission of the volume before being exposed inside Pod. This field
          will only apply to volume types which support fsGroup based
          ownership(and permissions). It will have no effect on ephemeral volume
          types such as: secret, configmaps and emptydir. Valid values are
          "OnRootMismatch" and "Always". If not specified, "Always" is used.
        required: false
        type: string
      runAsGroup:
        description: >-
          The GID to run the entrypoint of the container process. Uses runtime
          default if unset. May also be set in SecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence for that container.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      runAsNonRoot:
        description: >-
          Indicates that the container must run as a non-root user. If true, the
          Kubelet will validate the image at runtime to ensure that it does not
          run as UID 0 (root) and fail to start the container if it does. If
          unset or false, no such validation will be performed. May also be set
          in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence.
        required: false
        type: boolean
      runAsUser:
        description: >-
          The UID to run the entrypoint of the container process. Defaults to
          user specified in image metadata if unspecified. May also be set in
          SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes
          precedence for that container.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      seLinuxOptions:
        description: >-
          The SELinux context to be applied to all containers. If unspecified,
          the container runtime will allocate a random SELinux context for each
          container.  May also be set in SecurityContext.  If set in both
          SecurityContext and PodSecurityContext, the value specified in
          SecurityContext takes precedence for that container.
        required: false
        type: SELinuxOptions
      seccompProfile:
        description: The seccomp options to use by the containers in this pod.
        required: false
        type: SeccompProfile
      supplementalGroups:
        description: >-
          A list of groups applied to the first process run in each container,
          in addition to the container's primary GID.  If unspecified, no groups
          will be added to any container.
        required: false
        type: list
        entry_schema:
          type: integer
          constraints:
            - in_range: [-9223372036854775808, 9223372036854775807]
      sysctls:
        description: >-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with
          unsupported sysctls (by the container runtime) might fail to launch.
        required: false
        type: list
        entry_schema:
          type: Sysctl
      windowsOptions:
        description: >-
          The Windows specific settings applied to all containers. If
          unspecified, the options within a container's SecurityContext will be
          used. If set in both SecurityContext and PodSecurityContext, the value
          specified in SecurityContext takes precedence.
        required: false
        type: WindowsSecurityContextOptions

  Toleration:
    description: >-
      The pod this Toleration is attached to tolerates any taint that
      matches the triple <key,value,effect> using the matching operator
      <operator>.
    properties:
      effect:
        description: >-
          Effect indicates the taint effect to match. Empty means match all
          taint effects. When specified, allowed values are NoSchedule,
          PreferNoSchedule and NoExecute.
        required: false
        type: string
      key:
        description: >-
          Key is the taint key that the toleration applies to. Empty means match
          all taint keys. If the key is empty, operator must be Exists; this
          combination means to match all values and all keys.
        required: false
        type: string
      operator:
        description: >-
          Operator represents a key's relationship to the value. Valid operators
          are Exists and Equal. Defaults to Equal. Exists is equivalent to
          wildcard for value, so that a pod can tolerate all taints of a
          particular category.
        required: false
        type: string
      tolerationSeconds:
        description: >-
          TolerationSeconds represents the period of time the toleration (which
          must be of effect NoExecute, otherwise this field is ignored)
          tolerates the taint. By default, it is not set, which means tolerate
          the taint forever (do not evict). Zero and negative values will be
          treated as 0 (evict immediately) by the system.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      value:
        description: >-
          Value is the taint value the toleration matches to. If the operator is
          Exists, the value should be empty, otherwise just a regular string.
        required: false
        type: string

  TopologySpreadConstraint:
    description: >-
      TopologySpreadConstraint specifies how to spread matching pods among
      the given topology.
    properties:
      labelSelector:
        description: >-
          LabelSelector is used to find matching pods. Pods that match this
          label selector are counted to determine the number of pods in their
          corresponding topology domain.
        required: false
        type: meta:LabelSelector
      maxSkew:
        description: >-
          MaxSkew describes the degree to which pods may be unevenly
          distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum
          permitted difference between the number of matching pods in the target
          topology and the global minimum. For example, in a 3-zone cluster,
          MaxSkew is set to 1, and pods with the same labelSelector spread as
          1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if
          MaxSkew is 1, incoming pod can only be scheduled to zone3 to become
          1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0)
          on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod
          can be scheduled onto any zone. When
          `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher
          precedence to topologies that satisfy it. It's a required field.
          Default value is 1 and 0 is not allowed.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      topologyKey:
        description: >-
          TopologyKey is the key of node labels. Nodes that have a label with
          this key and identical values are considered to be in the same
          topology. We consider each <key, value> as a "bucket", and try to put
          balanced number of pods into each bucket. It's a required field.
        required: true
        type: string
      whenUnsatisfiable:
        description: >-
          WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
          A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
        required: true
        type: string

  AWSElasticBlockStoreVolumeSource:
    description: >-
      Represents a Persistent Disk resource in AWS.
      
      An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info: https://kubernetes.io/docs/concepts/storage/vo
          lumes#awselasticblockstore
        required: false
        type: string
      partition:
        description: >-
          The partition in the volume that you want to mount. If omitted, the
          default is to mount by volume name. Examples: For volume /dev/sda1,
          you specify the partition as "1". Similarly, the volume partition for
          /dev/sda is "0" (or you can leave the property empty).
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      readOnly:
        description: >-
          Specify "true" to force and set the ReadOnly property in VolumeMounts
          to "true". If omitted, the default is "false". More info: https://kube
          rnetes.io/docs/concepts/storage/volumes#awselasticblockstore
        required: false
        type: boolean
      volumeID:
        description: >-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselas
          ticblockstore
        required: true
        type: string

  AzureDiskVolumeSource:
    description: >-
      AzureDisk represents an Azure Data Disk mount on the host and bind
      mount to the pod.
    properties:
      cachingMode:
        description: >-
          Host Caching mode: None, Read Only, Read Write.
        required: false
        type: string
      diskName:
        description: The Name of the data disk in the blob storage
        required: true
        type: string
      diskURI:
        description: The URI the data disk in the blob storage
        required: true
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      kind:
        description: >-
          Expected values Shared: multiple blob disks per storage account
          Dedicated: single blob disk per storage account  Managed: azure
          managed data disk (only in managed availability set). defaults to
          shared
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean

  AzureFileVolumeSource:
    description: >-
      AzureFile represents an Azure File Service mount on the host and bind
      mount to the pod.
    properties:
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and Key
        required: true
        type: string
      shareName:
        description: Share Name
        required: true
        type: string

  CephFSVolumeSource:
    description: >-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      monitors:
        description: >-
          Required: Monitors is a collection of Ceph monitors More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: true
        type: list
        entry_schema:
          type: string
      path:
        description: >-
          Optional: Used as the mounted root, rather than the full Ceph tree,
          default is /
        required: false
        type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: boolean
      secretFile:
        description: >-
          Optional: SecretFile is the path to key ring for User, default is
          /etc/ceph/user.secret More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: string
      secretRef:
        description: >-
          Optional: SecretRef is reference to the authentication secret for
          User, default is empty. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: LocalObjectReference
      user:
        description: >-
          Optional: User is the rados user name, default is admin More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: string

  CinderVolumeSource:
    description: >-
      Represents a cinder volume resource in Openstack. A Cinder volume must
      exist before mounting to a container. The volume must also be in the
      same region as the kubelet. Cinder volumes support ownership
      management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly
          inferred to be "ext4" if unspecified. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: false
        type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: false
        type: boolean
      secretRef:
        description: >-
          Optional: points to a secret object containing parameters used to
          connect to OpenStack.
        required: false
        type: LocalObjectReference
      volumeID:
        description: >-
          volume id used to identify the volume in cinder. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: true
        type: string

  KeyToPath:
    description: Maps a string key to a path within a volume.
    properties:
      key:
        description: The key to project.
        required: true
        type: string
      mode:
        description: >-
          Optional: mode bits used to set permissions on this file. Must be an
          octal value between 0000 and 0777 or a decimal value between 0 and
          511. YAML accepts both octal and decimal values, JSON requires decimal
          values for mode bits. If not specified, the volume defaultMode will be
          used. This might be in conflict with other options that affect the
          file mode, like fsGroup, and the result can be other mode bits set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      path:
        description: >-
          The relative path of the file to map the key to. May not be an
          absolute path. May not contain the path element '..'. May not start
          with the string '..'.
        required: true
        type: string

  ConfigMapVolumeSource:
    description: >-
      Adapts a ConfigMap into a volume.
      
      The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits used to set permissions on created files by
          default. Must be an octal value between 0000 and 0777 or a decimal
          value between 0 and 511. YAML accepts both octal and decimal values,
          JSON requires decimal values for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting. This
          might be in conflict with other options that affect the file mode,
          like fsGroup, and the result can be other mode bits set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the
          referenced ConfigMap will be projected into the volume as a file whose
          name is the key and content is the value. If specified, the listed
          keys will be projected into the specified paths, and unlisted keys
          will not be present. If a key is specified which is not present in the
          ConfigMap, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with
          '..'.
        required: false
        type: list
        entry_schema:
          type: KeyToPath
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the ConfigMap or its keys must be defined
        required: false
        type: boolean

  CSIVolumeSource:
    description: >-
      Represents a source location of a volume to mount, managed by an
      external CSI driver
    properties:
      driver:
        description: >-
          Driver is the name of the CSI driver that handles this volume. Consult
          with your admin for the correct name as registered in the cluster.
        required: true
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided,
          the empty value is passed to the associated CSI driver which will
          determine the default filesystem to apply.
        required: false
        type: string
      nodePublishSecretRef:
        description: >-
          NodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodePublishVolume and NodeUnpublishVolume calls. This field is
          optional, and  may be empty if no secret is required. If the secret
          object contains more than one secret, all secret references are
          passed.
        required: false
        type: LocalObjectReference
      readOnly:
        description: >-
          Specifies a read-only configuration for the volume. Defaults to false
          (read/write).
        required: false
        type: boolean
      volumeAttributes:
        description: >-
          VolumeAttributes stores driver-specific properties that are passed to
          the CSI driver. Consult your driver's documentation for supported
          values.
        required: false
        type: map
        entry_schema:
          type: string

  DownwardAPIVolumeFile:
    description: >-
      DownwardAPIVolumeFile represents information to create the file
      containing the pod field
    properties:
      fieldRef:
        description: >-
          Required: Selects a field of the pod: only annotations, labels, name
          and namespace are supported.
        required: false
        type: ObjectFieldSelector
      mode:
        description: >-
          Optional: mode bits used to set permissions on this file, must be an
          octal value between 0000 and 0777 or a decimal value between 0 and
          511. YAML accepts both octal and decimal values, JSON requires decimal
          values for mode bits. If not specified, the volume defaultMode will be
          used. This might be in conflict with other options that affect the
          file mode, like fsGroup, and the result can be other mode bits set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      path:
        description: >-
          Required: Path is  the relative path name of the file to be created.
          Must not be absolute or contain the '..' path. Must be utf-8 encoded.
          The first item of the relative path must not start with '..'
        required: true
        type: string
      resourceFieldRef:
        description: >-
          Selects a resource of the container: only resources limits and
          requests (limits.cpu, limits.memory, requests.cpu and requests.memory)
          are currently supported.
        required: false
        type: ResourceFieldSelector

  DownwardAPIVolumeSource:
    description: >-
      DownwardAPIVolumeSource represents a volume containing downward API
      info. Downward API volumes support ownership management and SELinux
      relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by
          default. Must be an octal value between 0000 and 0777 or a decimal
          value between 0 and 511. YAML accepts both octal and decimal values,
          JSON requires decimal values for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting. This
          might be in conflict with other options that affect the file mode,
          like fsGroup, and the result can be other mode bits set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      items:
        description: Items is a list of downward API volume file
        required: false
        type: list
        entry_schema:
          type: DownwardAPIVolumeFile

  EmptyDirVolumeSource:
    description: >-
      Represents an empty directory for a pod. Empty directory volumes
      support ownership management and SELinux relabeling.
    properties:
      medium:
        description: >-
          What type of storage medium should back this directory. The default is
          "" which means to use the node's default medium. Must be an empty
          string (default) or Memory. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        required: false
        type: string
      sizeLimit:
        description: >-
          Total amount of local storage required for this EmptyDir volume. The
          size limit is also applicable for memory medium. The maximum usage on
          memory medium EmptyDir would be the minimum value between the
          SizeLimit specified here and the sum of memory limits of all
          containers in a pod. The default is nil which means that the limit is
          undefined. More info: http://kubernetes.io/docs/user-
          guide/volumes#emptydir
        required: false
        type: resource:Quantity

  TypedLocalObjectReference:
    description: >-
      TypedLocalObjectReference contains enough information to let you
      locate the typed referenced object inside the same namespace.
    properties:
      apiGroup:
        description: >-
          APIGroup is the group for the resource being referenced. If APIGroup
          is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
        required: false
        type: string
      kind:
        description: Kind is the type of resource being referenced
        required: true
        type: string
      name:
        description: Name is the name of resource being referenced
        required: true
        type: string

  PersistentVolumeClaimSpec:
    description: >-
      PersistentVolumeClaimSpec describes the common attributes of storage
      devices and allows a Source for provider-specific attributes
    properties:
      accessModes:
        description: >-
          AccessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#access-modes-1
        required: false
        type: list
        entry_schema:
          type: string
      dataSource:
        description: >-
          This field can be used to specify either: * An existing VolumeSnapshot
          object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
          (PersistentVolumeClaim) If the provisioner or an external controller
          can support the specified data source, it will create a new volume
          based on the contents of the specified data source. If the
          AnyVolumeDataSource feature gate is enabled, this field will always
          have the same contents as the DataSourceRef field.
        required: false
        type: TypedLocalObjectReference
      dataSourceRef:
        description: >-
          Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef
          allows any non-core object, as well as PersistentVolumeClaim objects.
          * While DataSource ignores disallowed values (dropping them), DataSourceRef
          preserves all values, and generates an error if a disallowed value is
          specified.
          (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
        required: false
        type: TypedLocalObjectReference
      resources:
        description: >-
          Resources represents the minimum resources the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#resources
        required: false
        type: ResourceRequirements
      selector:
        description: A label query over volumes to consider for binding.
        required: false
        type: meta:LabelSelector
      storageClassName:
        description: >-
          Name of the StorageClass required by the claim. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        required: false
        type: string
      volumeMode:
        description: >-
          volumeMode defines what type of volume is required by the claim. Value
          of Filesystem is implied when not included in claim spec.
        required: false
        type: string
      volumeName:
        description: >-
          VolumeName is the binding reference to the PersistentVolume backing
          this claim.
        required: false
        type: string

  PersistentVolumeClaimTemplate:
    description: >-
      PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim
      objects as part of an EphemeralVolumeSource.
    properties:
      metadata:
        description: >-
          May contain labels and annotations that will be copied into the PVC
          when creating it. No other fields are allowed and will be rejected
          during validation.
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          The specification for the PersistentVolumeClaim. The entire content is
          copied unchanged into the PVC that gets created from this template.
          The same fields as in a PersistentVolumeClaim are also valid here.
        required: true
        type: PersistentVolumeClaimSpec

  EphemeralVolumeSource:
    description: >-
      Represents an ephemeral volume that is handled by a normal storage
      driver.
    properties:
      volumeClaimTemplate:
        description: >-
          Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
          
          An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
          
          This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
          
          Required, must not be nil.
        required: false
        type: PersistentVolumeClaimTemplate

  FCVolumeSource:
    description: >-
      Represents a Fibre Channel volume. Fibre Channel volumes can only be
      mounted as read/write once. Fibre Channel volumes support ownership
      management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      lun:
        description: >-
          Optional: FC target lun number
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        required: false
        type: boolean
      targetWWNs:
        description: >-
          Optional: FC target worldwide names (WWNs)
        required: false
        type: list
        entry_schema:
          type: string
      wwids:
        description: >-
          Optional: FC volume world wide identifiers (wwids) Either wwids or
          combination of targetWWNs and lun must be set, but not both
          simultaneously.
        required: false
        type: list
        entry_schema:
          type: string

  FlexVolumeSource:
    description: >-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        required: true
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". The default
          filesystem depends on FlexVolume script.
        required: false
        type: string
      options:
        description: >-
          Optional: Extra command options if any.
        required: false
        type: map
        entry_schema:
          type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          Optional: SecretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be empty
          if no secret object is specified. If the secret object contains more
          than one secret, all secrets are passed to the plugin scripts.
        required: false
        type: LocalObjectReference

  FlockerVolumeSource:
    description: >-
      Represents a Flocker volume mounted by the Flocker agent. One and only
      one of datasetName and datasetUUID should be set. Flocker volumes do
      not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: >-
          Name of the dataset stored as metadata -> name on the dataset for
          Flocker should be considered as deprecated
        required: false
        type: string
      datasetUUID:
        description: UUID of the dataset. This is unique identifier of a Flocker dataset
        required: false
        type: string

  GCEPersistentDiskVolumeSource:
    description: >-
      Represents a Persistent Disk resource in Google Compute Engine.
      
      A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: false
        type: string
      partition:
        description: >-
          The partition in the volume that you want to mount. If omitted, the
          default is to mount by volume name. Examples: For volume /dev/sda1,
          you specify the partition as "1". Similarly, the volume partition for
          /dev/sda is "0" (or you can leave the property empty). More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      pdName:
        description: >-
          Unique name of the PD resource in GCE. Used to identify the disk in
          GCE. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: true
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: false
        type: boolean

  GitRepoVolumeSource:
    description: >-
      Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
      
      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    properties:
      directory:
        description: >-
          Target directory name. Must not contain or start with '..'.  If '.' is
          supplied, the volume directory will be the git repository.  Otherwise,
          if specified, the volume will contain the git repository in the
          subdirectory with the given name.
        required: false
        type: string
      repository:
        description: Repository URL
        required: true
        type: string
      revision:
        description: Commit hash for the specified revision.
        required: false
        type: string

  GlusterfsVolumeSource:
    description: >-
      Represents a Glusterfs mount that lasts the lifetime of a pod.
      Glusterfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      endpoints:
        description: >-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-
          a-pod
        required: true
        type: string
      path:
        description: >-
          Path is the Glusterfs volume path. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        required: true
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the Glusterfs volume to be mounted with read-
          only permissions. Defaults to false. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        required: false
        type: boolean

  HostPathVolumeSource:
    description: >-
      Represents a host path mapped into a pod. Host path volumes do not
      support ownership management or SELinux relabeling.
    properties:
      path:
        description: >-
          Path of the directory on the host. If the path is a symlink, it will
          follow the link to the real path. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        required: true
        type: string
      type:
        description: >-
          Type for HostPath Volume Defaults to "" More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        required: false
        type: string

  ISCSIVolumeSource:
    description: >-
      Represents an ISCSI disk. ISCSI volumes can only be mounted as
      read/write once. ISCSI volumes support ownership management and
      SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: whether support iSCSI Discovery CHAP authentication
        required: false
        type: boolean
      chapAuthSession:
        description: whether support iSCSI Session CHAP authentication
        required: false
        type: boolean
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        required: false
        type: string
      initiatorName:
        description: >-
          Custom iSCSI Initiator Name. If initiatorName is specified with
          iscsiInterface simultaneously, new iSCSI interface <target
          portal>:<volume name> will be created for the connection.
        required: false
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        required: true
        type: string
      iscsiInterface:
        description: >-
          iSCSI Interface Name that uses an iSCSI transport. Defaults to
          'default' (tcp).
        required: false
        type: string
      lun:
        description: iSCSI Target Lun number.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      portals:
        description: >-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port
          if the port is other than default (typically TCP ports 860 and 3260).
        required: false
        type: list
        entry_schema:
          type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
        required: false
        type: boolean
      secretRef:
        description: CHAP Secret for iSCSI target and initiator authentication
        required: false
        type: LocalObjectReference
      targetPortal:
        description: >-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the
          port is other than default (typically TCP ports 860 and 3260).
        required: true
        type: string

  NFSVolumeSource:
    description: >-
      Represents an NFS mount that lasts the lifetime of a pod. NFS volumes
      do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: >-
          Path that is exported by the NFS server. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        required: true
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the NFS export to be mounted with read-only
          permissions. Defaults to false. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        required: false
        type: boolean
      server:
        description: >-
          Server is the hostname or IP address of the NFS server. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#nfs
        required: true
        type: string

  PersistentVolumeClaimVolumeSource:
    description: >-
      PersistentVolumeClaimVolumeSource references the user's PVC in the
      same namespace. This volume finds the bound PV and mounts that volume
      for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a
      wrapper around another type of volume that is owned by someone else
      (the system).
    properties:
      claimName:
        description: >-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace
          as the pod using this volume. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: true
        type: string
      readOnly:
        description: Will force the ReadOnly setting in VolumeMounts. Default false.
        required: false
        type: boolean

  PhotonPersistentDiskVolumeSource:
    description: Represents a Photon Controller persistent disk resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      pdID:
        description: ID that identifies Photon Controller persistent disk
        required: true
        type: string

  PortworxVolumeSource:
    description: PortworxVolumeSource represents a Portworx volume resource.
    properties:
      fsType:
        description: >-
          FSType represents the filesystem type to mount Must be a filesystem
          type supported by the host operating system. Ex. "ext4", "xfs".
          Implicitly inferred to be "ext4" if unspecified.
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        required: true
        type: string

  ConfigMapProjection:
    description: >-
      Adapts a ConfigMap into a projected volume.
      
      The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
    properties:
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the
          referenced ConfigMap will be projected into the volume as a file whose
          name is the key and content is the value. If specified, the listed
          keys will be projected into the specified paths, and unlisted keys
          will not be present. If a key is specified which is not present in the
          ConfigMap, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with
          '..'.
        required: false
        type: list
        entry_schema:
          type: KeyToPath
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the ConfigMap or its keys must be defined
        required: false
        type: boolean

  DownwardAPIProjection:
    description: >-
      Represents downward API info for projecting into a projected volume.
      Note that this is identical to a downwardAPI volume source without the
      default mode.
    properties:
      items:
        description: Items is a list of DownwardAPIVolume file
        required: false
        type: list
        entry_schema:
          type: DownwardAPIVolumeFile

  SecretProjection:
    description: >-
      Adapts a secret into a projected volume.
      
      The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
    properties:
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the
          referenced Secret will be projected into the volume as a file whose
          name is the key and content is the value. If specified, the listed
          keys will be projected into the specified paths, and unlisted keys
          will not be present. If a key is specified which is not present in the
          Secret, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with
          '..'.
        required: false
        type: list
        entry_schema:
          type: KeyToPath
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      optional:
        description: Specify whether the Secret or its key must be defined
        required: false
        type: boolean

  ServiceAccountTokenProjection:
    description: >-
      ServiceAccountTokenProjection represents a projected service account
      token volume. This projection can be used to insert a service account
      token into the pods runtime filesystem for use against APIs
      (Kubernetes API Server or otherwise).
    properties:
      audience:
        description: >-
          Audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of
          the token, and otherwise should reject the token. The audience
          defaults to the identifier of the apiserver.
        required: false
        type: string
      expirationSeconds:
        description: >-
          ExpirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet
          will start trying to rotate the token if the token is older than 80
          percent of its time to live or if the token is older than 24
          hours.Defaults to 1 hour and must be at least 10 minutes.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      path:
        description: >-
          Path is the path relative to the mount point of the file to project
          the token into.
        required: true
        type: string

  VolumeProjection:
    description: >-
      Projection that may be projected along with other supported volume
      types
    properties:
      configMap:
        description: information about the configMap data to project
        required: false
        type: ConfigMapProjection
      downwardAPI:
        description: information about the downwardAPI data to project
        required: false
        type: DownwardAPIProjection
      secret:
        description: information about the secret data to project
        required: false
        type: SecretProjection
      serviceAccountToken:
        description: information about the serviceAccountToken data to project
        required: false
        type: ServiceAccountTokenProjection

  ProjectedVolumeSource:
    description: Represents a projected volume source
    properties:
      defaultMode:
        description: >-
          Mode bits used to set permissions on created files by default. Must be
          an octal value between 0000 and 0777 or a decimal value between 0 and
          511. YAML accepts both octal and decimal values, JSON requires decimal
          values for mode bits. Directories within the path are not affected by
          this setting. This might be in conflict with other options that affect
          the file mode, like fsGroup, and the result can be other mode bits
          set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      sources:
        description: list of volume projections
        required: false
        type: list
        entry_schema:
          type: VolumeProjection

  QuobyteVolumeSource:
    description: >-
      Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte
      volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: Group to map volume access to Default is no group
        required: false
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the Quobyte volume to be mounted with read-
          only permissions. Defaults to false.
        required: false
        type: boolean
      registry:
        description: >-
          Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are
          separated with commas) which acts as the central registry for volumes
        required: true
        type: string
      tenant:
        description: >-
          Tenant owning the given Quobyte volume in the Backend Used with
          dynamically provisioned Quobyte volumes, value is set by the plugin
        required: false
        type: string
      user:
        description: User to map volume access to Defaults to serivceaccount user
        required: false
        type: string
      volume:
        description: >-
          Volume is a string that references an already created Quobyte volume
          by name.
        required: true
        type: string

  RBDVolumeSource:
    description: >-
      Represents a Rados Block Device mount that lasts the lifetime of a
      pod. RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#rbd
        required: false
        type: string
      image:
        description: >-
          The rados image name. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: true
        type: string
      keyring:
        description: >-
          Keyring is the path to key ring for RBDUser. Default is
          /etc/ceph/keyring. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string
      monitors:
        description: >-
          A collection of Ceph monitors. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: true
        type: list
        entry_schema:
          type: string
      pool:
        description: >-
          The rados pool name. Default is rbd. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef is name of the authentication secret for RBDUser. If
          provided overrides keyring. Default is nil. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: LocalObjectReference
      user:
        description: >-
          The rados user name. Default is admin. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string

  ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
        required: false
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        required: true
        type: string
      protectionDomain:
        description: The name of the ScaleIO Protection Domain for the configured storage.
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will
          fail.
        required: true
        type: LocalObjectReference
      sslEnabled:
        description: Flag to enable/disable SSL communication with Gateway, default false
        required: false
        type: boolean
      storageMode:
        description: >-
          Indicates whether the storage for a volume should be ThickProvisioned
          or ThinProvisioned. Default is ThinProvisioned.
        required: false
        type: string
      storagePool:
        description: The ScaleIO Storage Pool associated with the protection domain.
        required: false
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        required: true
        type: string
      volumeName:
        description: >-
          The name of a volume already created in the ScaleIO system that is
          associated with this volume source.
        required: false
        type: string

  SecretVolumeSource:
    description: >-
      Adapts a Secret into a volume.
      
      The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: >-
          Optional: mode bits used to set permissions on created files by
          default. Must be an octal value between 0000 and 0777 or a decimal
          value between 0 and 511. YAML accepts both octal and decimal values,
          JSON requires decimal values for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting. This
          might be in conflict with other options that affect the file mode,
          like fsGroup, and the result can be other mode bits set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      items:
        description: >-
          If unspecified, each key-value pair in the Data field of the
          referenced Secret will be projected into the volume as a file whose
          name is the key and content is the value. If specified, the listed
          keys will be projected into the specified paths, and unlisted keys
          will not be present. If a key is specified which is not present in the
          Secret, the volume setup will error unless it is marked optional.
          Paths must be relative and may not contain the '..' path or start with
          '..'.
        required: false
        type: list
        entry_schema:
          type: KeyToPath
      optional:
        description: Specify whether the Secret or its keys must be defined
        required: false
        type: boolean
      secretName:
        description: >-
          Name of the secret in the pod's namespace to use. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#secret
        required: false
        type: string

  StorageOSVolumeSource:
    description: Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
        required: false
        type: LocalObjectReference
      volumeName:
        description: >-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        required: false
        type: string
      volumeNamespace:
        description: >-
          VolumeNamespace specifies the scope of the volume within StorageOS.
          If no namespace is specified then the Pod's namespace will be used.
          This allows the Kubernetes name scoping to be mirrored within
          StorageOS for tighter integration. Set VolumeName to any name to
          override the default behaviour. Set to "default" if you are not using
          namespaces within StorageOS. Namespaces that do not pre-exist within
          StorageOS will be created.
        required: false
        type: string

  VsphereVirtualDiskVolumeSource:
    description: Represents a vSphere volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      storagePolicyID:
        description: >-
          Storage Policy Based Management (SPBM) profile ID associated with the
          StoragePolicyName.
        required: false
        type: string
      storagePolicyName:
        description: Storage Policy Based Management (SPBM) profile name.
        required: false
        type: string
      volumePath:
        description: Path that identifies vSphere volume vmdk
        required: true
        type: string

  Volume:
    description: >-
      Volume represents a named volume in a pod that may be accessed by any
      container in the pod.
    properties:
      awsElasticBlockStore:
        description: >-
          AWSElasticBlockStore represents an AWS Disk resource that is attached
          to a kubelet's host machine and then exposed to the pod. More info: ht
          tps://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        required: false
        type: AWSElasticBlockStoreVolumeSource
      azureDisk:
        description: >-
          AzureDisk represents an Azure Data Disk mount on the host and bind
          mount to the pod.
        required: false
        type: AzureDiskVolumeSource
      azureFile:
        description: >-
          AzureFile represents an Azure File Service mount on the host and bind
          mount to the pod.
        required: false
        type: AzureFileVolumeSource
      cephfs:
        description: >-
          CephFS represents a Ceph FS mount on the host that shares a pod's
          lifetime
        required: false
        type: CephFSVolumeSource
      cinder:
        description: >-
          Cinder represents a cinder volume attached and mounted on kubelets
          host machine. More info: https://examples.k8s.io/mysql-cinder-
          pd/README.md
        required: false
        type: CinderVolumeSource
      configMap:
        description: ConfigMap represents a configMap that should populate this volume
        required: false
        type: ConfigMapVolumeSource
      csi:
        description: >-
          CSI (Container Storage Interface) represents ephemeral storage that is
          handled by certain external CSI drivers (Beta feature).
        required: false
        type: CSIVolumeSource
      downwardAPI:
        description: >-
          DownwardAPI represents downward API about the pod that should populate
          this volume
        required: false
        type: DownwardAPIVolumeSource
      emptyDir:
        description: >-
          EmptyDir represents a temporary directory that shares a pod's
          lifetime. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        required: false
        type: EmptyDirVolumeSource
      ephemeral:
        description: >-
          Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
          
          Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
          tracking are needed,
          c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
          a PersistentVolumeClaim (see EphemeralVolumeSource for more
          information on the connection between this volume type
          and PersistentVolumeClaim).
          
          Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
          
          Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
          
          A pod can use both types of ephemeral volumes and persistent volumes at the same time.
          
          This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.
        required: false
        type: EphemeralVolumeSource
      fc:
        description: >-
          FC represents a Fibre Channel resource that is attached to a kubelet's
          host machine and then exposed to the pod.
        required: false
        type: FCVolumeSource
      flexVolume:
        description: >-
          FlexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
        required: false
        type: FlexVolumeSource
      flocker:
        description: >-
          Flocker represents a Flocker volume attached to a kubelet's host
          machine. This depends on the Flocker control service being running
        required: false
        type: FlockerVolumeSource
      gcePersistentDisk:
        description: >-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: false
        type: GCEPersistentDiskVolumeSource
      gitRepo:
        description: >-
          GitRepo represents a git repository at a particular revision.
          DEPRECATED: GitRepo is deprecated. To provision a container with a git
          repo, mount an EmptyDir into an InitContainer that clones the repo
          using git, then mount the EmptyDir into the Pod's container.
        required: false
        type: GitRepoVolumeSource
      glusterfs:
        description: >-
          Glusterfs represents a Glusterfs mount on the host that shares a pod's
          lifetime. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md
        required: false
        type: GlusterfsVolumeSource
      hostPath:
        description: >-
          HostPath represents a pre-existing file or directory on the host
          machine that is directly exposed to the container. This is generally
          used for system agents or other privileged things that are allowed to
          see the host machine. Most containers will NOT need this. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        required: false
        type: HostPathVolumeSource
      iscsi:
        description: >-
          ISCSI represents an ISCSI Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. More info:
          https://examples.k8s.io/volumes/iscsi/README.md
        required: false
        type: ISCSIVolumeSource
      name:
        description: >-
          Volume's name. Must be a DNS_LABEL and unique within the pod. More
          info: https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: true
        type: string
      nfs:
        description: >-
          NFS represents an NFS mount on the host that shares a pod's lifetime
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        required: false
        type: NFSVolumeSource
      persistentVolumeClaim:
        description: >-
          PersistentVolumeClaimVolumeSource represents a reference to a
          PersistentVolumeClaim in the same namespace. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: false
        type: PersistentVolumeClaimVolumeSource
      photonPersistentDisk:
        description: >-
          PhotonPersistentDisk represents a PhotonController persistent disk
          attached and mounted on kubelets host machine
        required: false
        type: PhotonPersistentDiskVolumeSource
      portworxVolume:
        description: >-
          PortworxVolume represents a portworx volume attached and mounted on
          kubelets host machine
        required: false
        type: PortworxVolumeSource
      projected:
        description: Items for all in one resources secrets, configmaps, and downward API
        required: false
        type: ProjectedVolumeSource
      quobyte:
        description: >-
          Quobyte represents a Quobyte mount on the host that shares a pod's
          lifetime
        required: false
        type: QuobyteVolumeSource
      rbd:
        description: >-
          RBD represents a Rados Block Device mount on the host that shares a
          pod's lifetime. More info:
          https://examples.k8s.io/volumes/rbd/README.md
        required: false
        type: RBDVolumeSource
      scaleIO:
        description: >-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on
          Kubernetes nodes.
        required: false
        type: ScaleIOVolumeSource
      secret:
        description: >-
          Secret represents a secret that should populate this volume. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        required: false
        type: SecretVolumeSource
      storageos:
        description: >-
          StorageOS represents a StorageOS volume attached and mounted on
          Kubernetes nodes.
        required: false
        type: StorageOSVolumeSource
      vsphereVolume:
        description: >-
          VsphereVolume represents a vSphere volume attached and mounted on
          kubelets host machine
        required: false
        type: VsphereVirtualDiskVolumeSource

  PodSpec:
    description: PodSpec is a description of a pod.
    properties:
      activeDeadlineSeconds:
        description: >-
          Optional duration in seconds the pod may be active on the node
          relative to StartTime before the system will actively try to mark it
          failed and kill associated containers. Value must be a positive
          integer.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      affinity:
        description: >-
          If specified, the pod's scheduling constraints
        required: false
        type: Affinity
      automountServiceAccountToken:
        description: >-
          AutomountServiceAccountToken indicates whether a service account token
          should be automatically mounted.
        required: false
        type: boolean
      containers:
        description: >-
          List of containers belonging to the pod. Containers cannot currently
          be added or removed. There must be at least one container in a Pod.
          Cannot be updated.
        required: true
        type: list
        entry_schema:
          type: Container
      dnsConfig:
        description: >-
          Specifies the DNS parameters of a pod. Parameters specified here will
          be merged to the generated DNS configuration based on DNSPolicy.
        required: false
        type: PodDNSConfig
      dnsPolicy:
        description: >-
          Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values
          are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
          DNS parameters given in DNSConfig will be merged with the policy
          selected with DNSPolicy. To have DNS options set along with
          hostNetwork, you have to specify DNS policy explicitly to
          'ClusterFirstWithHostNet'.
        required: false
        type: string
      enableServiceLinks:
        description: >-
          EnableServiceLinks indicates whether information about services should
          be injected into pod's environment variables, matching the syntax of
          Docker links. Optional: Defaults to true.
        required: false
        type: boolean
      ephemeralContainers:
        description: >-
          List of ephemeral containers run in this pod. Ephemeral containers may
          be run in an existing pod to perform user-initiated actions such as
          debugging. This list cannot be specified when creating a pod, and it
          cannot be modified by updating the pod spec. In order to add an
          ephemeral container to an existing pod, use the pod's
          ephemeralcontainers subresource. This field is alpha-level and is only
          honored by servers that enable the EphemeralContainers feature.
        required: false
        type: list
        entry_schema:
          type: EphemeralContainer
      hostAliases:
        description: >-
          HostAliases is an optional list of hosts and IPs that will be injected
          into the pod's hosts file if specified. This is only valid for non-
          hostNetwork pods.
        required: false
        type: list
        entry_schema:
          type: HostAlias
      hostIPC:
        description: >-
          Use the host's ipc namespace. Optional: Default to false.
        required: false
        type: boolean
      hostNetwork:
        description: >-
          Host networking requested for this pod. Use the host's network
          namespace. If this option is set, the ports that will be used must be
          specified. Default to false.
        required: false
        type: boolean
      hostPID:
        description: >-
          Use the host's pid namespace. Optional: Default to false.
        required: false
        type: boolean
      hostname:
        description: >-
          Specifies the hostname of the Pod If not specified, the pod's hostname
          will be set to a system-defined value.
        required: false
        type: string
      imagePullSecrets:
        description: >-
          ImagePullSecrets is an optional list of references to secrets in the
          same namespace to use for pulling any of the images used by this
          PodSpec. If specified, these secrets will be passed to individual
          puller implementations for them to use. For example, in the case of
          docker, only DockerConfig type secrets are honored. More info:
          https://kubernetes.io/docs/concepts/containers/images#specifying-
          imagepullsecrets-on-a-pod
        required: false
        type: list
        entry_schema:
          type: LocalObjectReference
      initContainers:
        description: >-
          List of initialization containers belonging to the pod. Init
          containers are executed in order prior to containers being started. If
          any init container fails, the pod is considered to have failed and is
          handled according to its restartPolicy. The name for an init container
          or normal container must be unique among all containers. Init
          containers may not have Lifecycle actions, Readiness probes, Liveness
          probes, or Startup probes. The resourceRequirements of an init
          container are taken into account during scheduling by finding the
          highest request/limit for each resource type, and then using the max
          of of that value or the sum of the normal containers. Limits are
          applied to init containers in a similar fashion. Init containers
          cannot currently be added or removed. Cannot be updated. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        required: false
        type: list
        entry_schema:
          type: Container
      nodeName:
        description: >-
          NodeName is a request to schedule this pod onto a specific node. If it
          is non-empty, the scheduler simply schedules this pod onto that node,
          assuming that it fits resource requirements.
        required: false
        type: string
      nodeSelector:
        description: >-
          NodeSelector is a selector which must be true for the pod to fit on a
          node. Selector which must match a node's labels for the pod to be
          scheduled on that node. More info:
          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        required: false
        type: map
        entry_schema:
          type: string
      overhead:
        description: >-
          Overhead represents the resource overhead associated with running a
          pod for a given RuntimeClass. This field will be autopopulated at
          admission time by the RuntimeClass admission controller. If the
          RuntimeClass admission controller is enabled, overhead must not be set
          in Pod create requests. The RuntimeClass admission controller will
          reject Pod create requests which have the overhead already set. If
          RuntimeClass is configured and selected in the PodSpec, Overhead will
          be set to the value defined in the corresponding RuntimeClass,
          otherwise it will remain unset and treated as zero. More info:
          https://git.k8s.io/enhancements/keps/sig-node/688-pod-
          overhead/README.md This field is beta-level as of Kubernetes v1.18,
          and is only honored by servers that enable the PodOverhead feature.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      preemptionPolicy:
        description: >-
          PreemptionPolicy is the Policy for preempting pods with lower
          priority. One of Never, PreemptLowerPriority. Defaults to
          PreemptLowerPriority if unset. This field is beta-level, gated by the
          NonPreemptingPriority feature-gate.
        required: false
        type: string
      priority:
        description: >-
          The priority value. Various system components use this field to find
          the priority of the pod. When Priority Admission Controller is
          enabled, it prevents users from setting this field. The admission
          controller populates this field from PriorityClassName. The higher the
          value, the higher the priority.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      priorityClassName:
        description: >-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any
          other name must be defined by creating a PriorityClass object with
          that name. If not specified, the pod priority will be default or zero
          if there is no default.
        required: false
        type: string
      readinessGates:
        description: >-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND all conditions
          specified in the readiness gates have status equal to "True" More
          info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-
          readiness-gates
        required: false
        type: list
        entry_schema:
          type: PodReadinessGate
      restartPolicy:
        description: >-
          Restart policy for all containers within the pod. One of Always,
          OnFailure, Never. Default to Always. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle/#restart-policy
        required: false
        type: string
      runtimeClassName:
        description: >-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io
          group, which should be used to run this pod.  If no RuntimeClass
          resource matches the named class, the pod will not be run. If unset or
          empty, the "legacy" RuntimeClass will be used, which is an implicit
          class with an empty definition that uses the default runtime handler.
          More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-
          class This is a beta feature as of Kubernetes v1.14.
        required: false
        type: string
      schedulerName:
        description: >-
          If specified, the pod will be dispatched by specified scheduler. If
          not specified, the pod will be dispatched by default scheduler.
        required: false
        type: string
      securityContext:
        description: >-
          SecurityContext holds pod-level security attributes and common
          container settings. Optional: Defaults to empty.  See type description
          for default values of each field.
        required: false
        type: PodSecurityContext
      serviceAccount:
        description: >-
          DeprecatedServiceAccount is a depreciated alias for
          ServiceAccountName. Deprecated: Use serviceAccountName instead.
        required: false
        type: string
      serviceAccountName:
        description: >-
          ServiceAccountName is the name of the ServiceAccount to use to run
          this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-
          container/configure-service-account/
        required: false
        type: string
      setHostnameAsFQDN:
        description: >-
          If true the pod's hostname will be configured as the pod's FQDN,
          rather than the leaf name (the default). In Linux containers, this
          means setting the FQDN in the hostname field of the kernel (the
          nodename field of struct utsname). In Windows containers, this means
          setting the registry value of hostname for the registry key
          HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
          to FQDN. If a pod does not have FQDN, this has no effect. Default to
          false.
        required: false
        type: boolean
      shareProcessNamespace:
        description: >-
          Share a single process namespace between all of the containers in a
          pod. When this is set containers will be able to view and signal
          processes from other containers in the same pod, and the first process
          in each container will not be assigned PID 1. HostPID and
          ShareProcessNamespace cannot both be set. Optional: Default to false.
        required: false
        type: boolean
      subdomain:
        description: >-
          If specified, the fully qualified Pod hostname will be
          "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not
          specified, the pod will not have a domainname at all.
        required: false
        type: string
      terminationGracePeriodSeconds:
        description: >-
          Optional duration in seconds the pod needs to terminate gracefully.
          May be decreased in delete request. Value must be non-negative
          integer. The value zero indicates stop immediately via the kill signal
          (no opportunity to shut down). If this value is nil, the default grace
          period will be used instead. The grace period is the duration in
          seconds after the processes running in the pod are sent a termination
          signal and the time when the processes are forcibly halted with a kill
          signal. Set this value longer than the expected cleanup time for your
          process. Defaults to 30 seconds.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      tolerations:
        description: >-
          If specified, the pod's tolerations.
        required: false
        type: list
        entry_schema:
          type: Toleration
      topologySpreadConstraints:
        description: >-
          TopologySpreadConstraints describes how a group of pods ought to
          spread across topology domains. Scheduler will schedule pods in a way
          which abides by the constraints. All topologySpreadConstraints are
          ANDed.
        required: false
        type: list
        entry_schema:
          type: TopologySpreadConstraint
        metadata:
          x-kubernetes-list-map-keys: ['topologyKey', 'whenUnsatisfiable']
          x-kubernetes-list-type: map
      volumes:
        description: >-
          List of volumes that can be mounted by containers belonging to the
          pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
        required: false
        type: list
        entry_schema:
          type: Volume

  PodTemplateSpec:
    description: >-
      PodTemplateSpec describes the data a pod should have when created from
      a template
    properties:
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Specification of the desired behavior of the pod. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: PodSpec

  ReplicationControllerSpec:
    description: >-
      ReplicationControllerSpec is the specification of a replication
      controller.
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be
          ready without any of its container crashing, for it to be considered
          available. Defaults to 0 (pod will be considered available as soon as
          it is ready)
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Replicas is the number of desired replicas. This is a pointer to
          distinguish between explicit zero and unspecified. Defaults to 1. More
          info: https://kubernetes.io/docs/concepts/workloads/controllers/replic
          ationcontroller#what-is-a-replicationcontroller
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      selector:
        description: >-
          Selector is a label query over pods that should match the Replicas
          count. If Selector is empty, it is defaulted to the labels present on
          the Pod template. Label keys and values that must match in order to be
          controlled by this replication controller, if empty defaulted to
          labels on Pod template. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/labels/#label-selectors
        required: false
        type: map
        entry_schema:
          type: string
      template:
        description: >-
          Template is the object that describes the pod that will be created if
          insufficient replicas are detected. This takes precedence over a
          TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/
          controllers/replicationcontroller#pod-template
        required: false
        type: PodTemplateSpec

  PersistentVolumeClaimCondition:
    description: PersistentVolumeClaimCondition contails details about state of pvc
    properties:
      lastProbeTime:
        description: Last time we probed the condition.
        required: false
        type: meta:Time
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: Human-readable message indicating details about last transition.
        required: false
        type: string
      reason:
        description: >-
          Unique, this should be a short, machine understandable string that
          gives the reason for condition's last transition. If it reports
          "ResizeStarted" that means the underlying persistent volume is being
          resized.
        required: false
        type: string
      status:
        required: true
        type: string
      type:
        required: true
        type: string

  PersistentVolumeClaimStatus:
    description: >-
      PersistentVolumeClaimStatus is the current status of a persistent
      volume claim.
    properties:
      accessModes:
        description: >-
          AccessModes contains the actual access modes the volume backing the
          PVC has. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-
          modes-1
        required: false
        type: list
        entry_schema:
          type: string
      capacity:
        description: Represents the actual resources of the underlying volume.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      conditions:
        description: >-
          Current Condition of persistent volume claim. If underlying persistent
          volume is being resized then the Condition will be set to
          'ResizeStarted'.
        required: false
        type: list
        entry_schema:
          type: PersistentVolumeClaimCondition
      phase:
        description: Phase represents the current phase of PersistentVolumeClaim.
        required: false
        type: string

  PersistentVolumeClaim:
    description: >-
      PersistentVolumeClaim is a user's request for and claim to a
      persistent volume
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: PersistentVolumeClaim
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the desired characteristics of a volume requested by a
          pod author. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: false
        type: PersistentVolumeClaimSpec
      status:
        description: >-
          Status represents the current information/status of a persistent
          volume claim. Read-only. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#persistentvolumeclaims
        required: false
        type: PersistentVolumeClaimStatus

  ObjectReference:
    description: >-
      ObjectReference contains enough information to let you inspect or
      modify the referred object.
    properties:
      apiVersion:
        description: API version of the referent.
        required: false
        type: string
      fieldPath:
        description: >-
          If referring to a piece of an object instead of an entire object, this
          string should contain a valid JSON/Go field access statement, such as
          desiredState.manifest.containers[2]. For example, if the object
          reference is to a container within a pod, this would take on a value
          like: "spec.containers{name}" (where "name" refers to the name of the
          container that triggered the event) or if no container name is
          specified "spec.containers[2]" (container with index 2 in this pod).
          This syntax is chosen only to have some well-defined way of
          referencing a part of an object.
        required: false
        type: string
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      name:
        description: >-
          Name of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#names
        required: false
        type: string
      namespace:
        description: >-
          Namespace of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/namespaces/
        required: false
        type: string
      resourceVersion:
        description: >-
          Specific resourceVersion to which this reference is made, if any. More
          info: https://git.k8s.io/community/contributors/devel/sig-
          architecture/api-conventions.md#concurrency-control-and-consistency
        required: false
        type: string
      uid:
        description: >-
          UID of the referent. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/names/#uids
        required: false
        type: string

  EventSeries:
    description: >-
      EventSeries contain information on series of events, i.e. thing that
      was/is happening continuously for some time.
    properties:
      count:
        description: Number of occurrences in this series up to the last heartbeat time
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      lastObservedTime:
        description: Time of the last occurrence observed
        required: false
        type: meta:MicroTime

  NodeAddress:
    description: >-
      NodeAddress contains information for the node's address.
    properties:
      address:
        description: The node address.
        required: true
        type: string
      type:
        description: Node address type, one of Hostname, ExternalIP or InternalIP.
        required: true
        type: string

  NodeCondition:
    description: NodeCondition contains condition information for a node.
    properties:
      lastHeartbeatTime:
        description: Last time we got an update on a given condition.
        required: false
        type: meta:Time
      lastTransitionTime:
        description: Last time the condition transit from one status to another.
        required: false
        type: meta:Time
      message:
        description: Human readable message indicating details about last transition.
        required: false
        type: string
      reason:
        description: >-
          (brief) reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of node condition.
        required: true
        type: string

  ConfigMapNodeConfigSource:
    description: >-
      ConfigMapNodeConfigSource contains the information to reference a
      ConfigMap as a config source for the Node. This API is deprecated
      since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-
      kubelet-configuration
    properties:
      kubeletConfigKey:
        description: >-
          KubeletConfigKey declares which key of the referenced ConfigMap
          corresponds to the KubeletConfiguration structure This field is
          required in all cases.
        required: true
        type: string
      name:
        description: >-
          Name is the metadata.name of the referenced ConfigMap. This field is
          required in all cases.
        required: true
        type: string
      namespace:
        description: >-
          Namespace is the metadata.namespace of the referenced ConfigMap. This
          field is required in all cases.
        required: true
        type: string
      resourceVersion:
        description: >-
          ResourceVersion is the metadata.ResourceVersion of the referenced
          ConfigMap. This field is forbidden in Node.Spec, and required in
          Node.Status.
        required: false
        type: string
      uid:
        description: >-
          UID is the metadata.UID of the referenced ConfigMap. This field is
          forbidden in Node.Spec, and required in Node.Status.
        required: false
        type: string

  NodeConfigSource:
    description: >-
      NodeConfigSource specifies a source of node configuration. Exactly one
      subfield (excluding metadata) must be non-nil. This API is deprecated
      since 1.22
    properties:
      configMap:
        description: >-
          ConfigMap is a reference to a Node's ConfigMap
        required: false
        type: ConfigMapNodeConfigSource

  NodeConfigStatus:
    description: >-
      NodeConfigStatus describes the status of the config assigned by
      Node.Spec.ConfigSource.
    properties:
      active:
        description: >-
          Active reports the checkpointed config the node is actively using.
          Active will represent either the current version of the Assigned
          config, or the current LastKnownGood config, depending on whether
          attempting to use the Assigned config results in an error.
        required: false
        type: NodeConfigSource
      assigned:
        description: >-
          Assigned reports the checkpointed config the node will try to use.
          When Node.Spec.ConfigSource is updated, the node checkpoints the
          associated config payload to local disk, along with a record
          indicating intended config. The node refers to this record to choose
          its config checkpoint, and reports this record in Assigned. Assigned
          only updates in the status after the record has been checkpointed to
          disk. When the Kubelet is restarted, it tries to make the Assigned
          config the Active config by loading and validating the checkpointed
          payload identified by Assigned.
        required: false
        type: NodeConfigSource
      error:
        description: >-
          Error describes any problems reconciling the Spec.ConfigSource to the
          Active config. Errors may occur, for example, attempting to checkpoint
          Spec.ConfigSource to the local Assigned record, attempting to
          checkpoint the payload associated with Spec.ConfigSource, attempting
          to load or validate the Assigned config, etc. Errors may occur at
          different points while syncing config. Earlier errors (e.g. download
          or checkpointing errors) will not result in a rollback to
          LastKnownGood, and may resolve across Kubelet retries. Later errors
          (e.g. loading or validating a checkpointed config) will result in a
          rollback to LastKnownGood. In the latter case, it is usually possible
          to resolve the error by fixing the config assigned in
          Spec.ConfigSource. You can find additional information for debugging
          by searching the error message in the Kubelet log. Error is a human-
          readable description of the error state; machines can check whether or
          not Error is empty, but should not rely on the stability of the Error
          text across Kubelet versions.
        required: false
        type: string
      lastKnownGood:
        description: >-
          LastKnownGood reports the checkpointed config the node will fall back
          to when it encounters an error attempting to use the Assigned config.
          The Assigned config becomes the LastKnownGood config when the node
          determines that the Assigned config is stable and correct. This is
          currently implemented as a 10-minute soak period starting when the
          local record of Assigned config is updated. If the Assigned config is
          Active at the end of this period, it becomes the LastKnownGood. Note
          that if Spec.ConfigSource is reset to nil (use local defaults), the
          LastKnownGood is also immediately reset to nil, because the local
          default config is always assumed good. You should not make assumptions
          about the node's method of determining config stability and
          correctness, as this may change or become configurable in the future.
        required: false
        type: NodeConfigSource

  DaemonEndpoint:
    description: DaemonEndpoint contains information about a single Daemon endpoint.
    properties:
      Port:
        description: Port number of the given endpoint.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  NodeDaemonEndpoints:
    description: NodeDaemonEndpoints lists ports opened by daemons running on the Node.
    properties:
      kubeletEndpoint:
        description: Endpoint on which Kubelet is listening.
        required: false
        type: DaemonEndpoint

  ContainerImage:
    description: Describe a container image
    properties:
      names:
        description: >-
          Names by which this image is known. e.g.
          ["k8s.gcr.io/hyperkube:v1.0.7",
          "dockerhub.io/google_containers/hyperkube:v1.0.7"]
        required: false
        type: list
        entry_schema:
          type: string
      sizeBytes:
        description: The size of the image in bytes.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]

  NodeSystemInfo:
    description: NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    properties:
      architecture:
        description: The Architecture reported by the node
        required: true
        type: string
      bootID:
        description: Boot ID reported by the node.
        required: true
        type: string
      containerRuntimeVersion:
        description: >-
          ContainerRuntime Version reported by the node through runtime remote
          API (e.g. docker://1.5.0).
        required: true
        type: string
      kernelVersion:
        description: >-
          Kernel Version reported by the node from 'uname -r' (e.g.
          3.16.0-0.bpo.4-amd64).
        required: true
        type: string
      kubeProxyVersion:
        description: KubeProxy Version reported by the node.
        required: true
        type: string
      kubeletVersion:
        description: Kubelet Version reported by the node.
        required: true
        type: string
      machineID:
        description: >-
          MachineID reported by the node. For unique machine identification in
          the cluster this field is preferred. Learn more from man(5) machine-
          id: http://man7.org/linux/man-pages/man5/machine-id.5.html
        required: true
        type: string
      operatingSystem:
        description: The Operating System reported by the node
        required: true
        type: string
      osImage:
        description: >-
          OS Image reported by the node from /etc/os-release (e.g. Debian
          GNU/Linux 7 (wheezy)).
        required: true
        type: string
      systemUUID:
        description: >-
          SystemUUID reported by the node. For unique machine identification
          MachineID is preferred. This field is specific to Red Hat hosts
          https://access.redhat.com/documentation/en-
          us/red_hat_subscription_management/1/html/rhsm/uuid
        required: true
        type: string

  AttachedVolume:
    description: AttachedVolume describes a volume attached to a node
    properties:
      devicePath:
        description: >-
          DevicePath represents the device path where the volume should be
          available
        required: true
        type: string
      name:
        description: Name of the attached volume
        required: true
        type: string

  NodeStatus:
    description: NodeStatus is information about the current status of a node.
    properties:
      addresses:
        description: >-
          List of addresses reachable to the node. Queried from cloud provider,
          if available. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This
          field is declared as mergeable, but the merge key is not sufficiently
          unique, which can cause data corruption when it is merged. Callers
          should instead use a full-replacement patch. See
          http://pr.k8s.io/79391 for an example.
        required: false
        type: list
        entry_schema:
          type: NodeAddress
      allocatable:
        description: >-
          Allocatable represents the resources of a node that are available for
          scheduling. Defaults to Capacity.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      capacity:
        description: >-
          Capacity represents the total resources of a node. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#capacity
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      conditions:
        description: >-
          Conditions is an array of current observed node conditions. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#condition
        required: false
        type: list
        entry_schema:
          type: NodeCondition
      config:
        description: >-
          Status of the config assigned to the node via the dynamic Kubelet
          config feature.
        required: false
        type: NodeConfigStatus
      daemonEndpoints:
        description: Endpoints of daemons running on the Node.
        required: false
        type: NodeDaemonEndpoints
      images:
        description: List of container images on this node
        required: false
        type: list
        entry_schema:
          type: ContainerImage
      nodeInfo:
        description: >-
          Set of ids/uuids to uniquely identify the node. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#info
        required: false
        type: NodeSystemInfo
      phase:
        description: >-
          NodePhase is the recently observed lifecycle phase of the node. More
          info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field
          is never populated, and now is deprecated.
        required: false
        type: string
      volumesAttached:
        description: List of volumes that are attached to the node.
        required: false
        type: list
        entry_schema:
          type: AttachedVolume
      volumesInUse:
        description: List of attachable volumes in use (mounted) by the node.
        required: false
        type: list
        entry_schema:
          type: string

  NamespaceSpec:
    description: NamespaceSpec describes the attributes on a Namespace.
    properties:
      finalizers:
        description: >-
          Finalizers is an opaque list of values that must be empty to
          permanently remove object from storage. More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        required: false
        type: list
        entry_schema:
          type: string

  PodCondition:
    description: PodCondition contains details for the current condition of this pod.
    properties:
      lastProbeTime:
        description: Last time we probed the condition.
        required: false
        type: meta:Time
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: Human-readable message indicating details about last transition.
        required: false
        type: string
      reason:
        description: >-
          Unique, one-word, CamelCase reason for the condition's last
          transition.
        required: false
        type: string
      status:
        description: >-
          Status is the status of the condition. Can be True, False, Unknown.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-
          lifecycle#pod-conditions
        required: true
        type: string
      type:
        description: >-
          Type is the type of the condition. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-
          conditions
        required: true
        type: string

  ContainerStateRunning:
    description: ContainerStateRunning is a running state of a container.
    properties:
      startedAt:
        description: Time at which the container was last (re-)started
        required: false
        type: meta:Time

  ContainerStateTerminated:
    description: ContainerStateTerminated is a terminated state of a container.
    properties:
      containerID:
        description: >-
          Container's ID in the format 'docker://<container_id>'
        required: false
        type: string
      exitCode:
        description: Exit status from the last termination of the container
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      finishedAt:
        description: Time at which the container last terminated
        required: false
        type: meta:Time
      message:
        description: Message regarding the last termination of the container
        required: false
        type: string
      reason:
        description: (brief) reason from the last termination of the container
        required: false
        type: string
      signal:
        description: Signal from the last termination of the container
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      startedAt:
        description: Time at which previous execution of the container started
        required: false
        type: meta:Time

  ContainerStateWaiting:
    description: ContainerStateWaiting is a waiting state of a container.
    properties:
      message:
        description: Message regarding why the container is not yet running.
        required: false
        type: string
      reason:
        description: (brief) reason the container is not yet running.
        required: false
        type: string

  ContainerState:
    description: >-
      ContainerState holds a possible state of container. Only one of its
      members may be specified. If none of them is specified, the default
      one is ContainerStateWaiting.
    properties:
      running:
        description: Details about a running container
        required: false
        type: ContainerStateRunning
      terminated:
        description: Details about a terminated container
        required: false
        type: ContainerStateTerminated
      waiting:
        description: Details about a waiting container
        required: false
        type: ContainerStateWaiting

  ContainerStatus:
    description: >-
      ContainerStatus contains details for the current status of this
      container.
    properties:
      containerID:
        description: >-
          Container's ID in the format 'docker://<container_id>'.
        required: false
        type: string
      image:
        description: >-
          The image the container is running. More info:
          https://kubernetes.io/docs/concepts/containers/images.
        required: true
        type: string
      imageID:
        description: >-
          ImageID of the container's image.
        required: true
        type: string
      lastState:
        description: >-
          Details about the container's last termination condition.
        required: false
        type: ContainerState
      name:
        description: >-
          This must be a DNS_LABEL. Each container in a pod must have a unique
          name. Cannot be updated.
        required: true
        type: string
      ready:
        description: Specifies whether the container has passed its readiness probe.
        required: true
        type: boolean
      restartCount:
        description: The number of times the container has been restarted.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      started:
        description: >-
          Specifies whether the container has passed its startup probe.
          Initialized as false, becomes true after startupProbe is considered
          successful. Resets to false when the container is restarted, or if
          kubelet loses state temporarily. Is always true when no startupProbe
          is defined.
        required: false
        type: boolean
      state:
        description: >-
          Details about the container's current condition.
        required: false
        type: ContainerState

  PodIP:
    description: >-
      IP address information for entries in the (plural) PodIPs field. Each entry includes:
      IP: An IP address allocated to the pod. Routable at least within the cluster.
    properties:
      ip:
        description: ip is an IP address (IPv4 or IPv6) assigned to the pod
        required: false
        type: string

  PodStatus:
    description: >-
      PodStatus represents information about the status of a pod. Status may
      trail the actual state of a system, especially if the node that hosts
      the pod cannot contact the control plane.
    properties:
      conditions:
        description: >-
          Current service state of pod. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-
          conditions
        required: false
        type: list
        entry_schema:
          type: PodCondition
      containerStatuses:
        description: >-
          The list has one entry per container in the manifest. Each entry is
          currently the output of `docker inspect`. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-
          and-container-status
        required: false
        type: list
        entry_schema:
          type: ContainerStatus
      ephemeralContainerStatuses:
        description: >-
          Status for any ephemeral containers that have run in this pod. This
          field is alpha-level and is only populated by servers that enable the
          EphemeralContainers feature.
        required: false
        type: list
        entry_schema:
          type: ContainerStatus
      hostIP:
        description: >-
          IP address of the host to which the pod is assigned. Empty if not yet
          scheduled.
        required: false
        type: string
      initContainerStatuses:
        description: >-
          The list has one entry per init container in the manifest. The most
          recent successful init container will have ready = true, the most
          recently started container will have startTime set. More info:
          https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-
          and-container-status
        required: false
        type: list
        entry_schema:
          type: ContainerStatus
      message:
        description: >-
          A human readable message indicating details about why the pod is in
          this condition.
        required: false
        type: string
      nominatedNodeName:
        description: >-
          nominatedNodeName is set only when this pod preempts other pods on the
          node, but it cannot be scheduled right away as preemption victims
          receive their graceful termination periods. This field does not
          guarantee that the pod will be scheduled on this node. Scheduler may
          decide to place the pod elsewhere if other nodes become available
          sooner. Scheduler may also decide to give the resources on this node
          to a higher priority pod that is created after preemption. As a
          result, this field may be different than PodSpec.nodeName when the pod
          is scheduled.
        required: false
        type: string
      phase:
        description: >-
          The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
          
          Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
          
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
        required: false
        type: string
      podIP:
        description: >-
          IP address allocated to the pod. Routable at least within the cluster.
          Empty if not yet allocated.
        required: false
        type: string
      podIPs:
        description: >-
          podIPs holds the IP addresses allocated to the pod. If this field is
          specified, the 0th entry must match the podIP field. Pods may be
          allocated at most 1 value for each of IPv4 and IPv6. This list is
          empty if no IPs have been allocated yet.
        required: false
        type: list
        entry_schema:
          type: PodIP
      qosClass:
        description: >-
          The Quality of Service (QOS) classification assigned to the pod based
          on resource requirements See PodQOSClass type for available QOS
          classes More info: https://git.k8s.io/community/contributors/design-
          proposals/node/resource-qos.md
        required: false
        type: string
      reason:
        description: >-
          A brief CamelCase message indicating details about why the pod is in
          this state. e.g. 'Evicted'
        required: false
        type: string
      startTime:
        description: >-
          RFC 3339 date and time at which the object was acknowledged by the
          Kubelet. This is before the Kubelet pulled the container image(s) for
          the pod.
        required: false
        type: meta:Time

  PersistentVolumeStatus:
    description: PersistentVolumeStatus is the current status of a persistent volume.
    properties:
      message:
        description: >-
          A human-readable message indicating details about why the volume is in
          this state.
        required: false
        type: string
      phase:
        description: >-
          Phase indicates if a volume is available, bound to a claim, or
          released by a claim. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
        required: false
        type: string
      reason:
        description: >-
          Reason is a brief CamelCase string that describes any failure and is
          meant for machine parsing and tidy display in the CLI.
        required: false
        type: string

  ServicePort:
    description: >-
      ServicePort contains information on service's port.
    properties:
      appProtocol:
        description: >-
          The application protocol for this port. This field follows standard
          Kubernetes label syntax. Un-prefixed names are reserved for IANA
          standard service names (as per RFC-6335 and
          http://www.iana.org/assignments/service-names). Non-standard protocols
          should use prefixed names such as mycompany.com/my-custom-protocol.
        required: false
        type: string
      name:
        description: >-
          The name of this port within the service. This must be a DNS_LABEL.
          All ports within a ServiceSpec must have unique names. When
          considering the endpoints for a Service, this must match the 'name'
          field in the EndpointPort. Optional if only one ServicePort is defined
          on this service.
        required: false
        type: string
      nodePort:
        description: >-
          The port on each node on which this service is exposed when type is
          NodePort or LoadBalancer.  Usually assigned by the system. If a value
          is specified, in-range, and not in use it will be used, otherwise the
          operation will fail.  If not specified, a port will be allocated if
          this Service requires one.  If this field is specified when creating a
          Service which does not need it, creation will fail. This field will be
          wiped when updating a Service to no longer need it (e.g. changing type
          from NodePort to ClusterIP). More info:
          https://kubernetes.io/docs/concepts/services-networking/service/#type-
          nodeport
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      port:
        description: The port that will be exposed by this service.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      protocol:
        description: >-
          The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
          Default is TCP.
        required: false
        type: string
      targetPort:
        description: >-
          Number or name of the port to access on the pods targeted by the
          service. Number must be in the range 1 to 65535. Name must be an
          IANA_SVC_NAME. If this is a string, it will be looked up as a named
          port in the target Pod's container ports. If this is not specified,
          the value of the 'port' field is used (an identity map). This field is
          ignored for services with clusterIP=None, and should be omitted or set
          equal to the 'port' field. More info:
          https://kubernetes.io/docs/concepts/services-
          networking/service/#defining-a-service
        required: false
        type: intstr:IntOrString

  ClientIPConfig:
    description: >-
      ClientIPConfig represents the configurations of Client IP based
      session affinity.
    properties:
      timeoutSeconds:
        description: >-
          timeoutSeconds specifies the seconds of ClientIP type session sticky
          time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity ==
          "ClientIP". Default value is 10800(for 3 hours).
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  SessionAffinityConfig:
    description: >-
      SessionAffinityConfig represents the configurations of session
      affinity.
    properties:
      clientIP:
        description: >-
          clientIP contains the configurations of Client IP based session
          affinity.
        required: false
        type: ClientIPConfig

  ServiceSpec:
    description: ServiceSpec describes the attributes that a user creates on a service.
    properties:
      allocateLoadBalancerNodePorts:
        description: >-
          allocateLoadBalancerNodePorts defines if NodePorts will be
          automatically allocated for services with type LoadBalancer.  Default
          is "true". It may be set to "false" if the cluster load-balancer does
          not rely on NodePorts.  If the caller requests specific NodePorts (by
          specifying a value), those requests will be respected, regardless of
          this field. This field may only be set for services with type
          LoadBalancer and will be cleared if the type is changed to any other
          type. This field is beta-level and is only honored by servers that
          enable the ServiceLBNodePortControl feature.
        required: false
        type: boolean
      clusterIP:
        description: >-
          clusterIP is the IP address of the service and is usually assigned
          randomly. If an address is specified manually, is in-range (as per
          system configuration), and is not in use, it will be allocated to the
          service; otherwise creation of the service will fail. This field may
          not be changed through updates unless the type field is also being
          changed to ExternalName (which requires this field to be blank) or the
          type field is being changed from ExternalName (in which case this
          field may optionally be specified, as describe above).  Valid values
          are "None", empty string (""), or a valid IP address. Setting this to
          "None" makes a "headless service" (no virtual IP), which is useful
          when direct endpoint connections are preferred and proxying is not
          required.  Only applies to types ClusterIP, NodePort, and
          LoadBalancer. If this field is specified when creating a Service of
          type ExternalName, creation will fail. This field will be wiped when
          updating a Service to type ExternalName. More info:
          https://kubernetes.io/docs/concepts/services-
          networking/service/#virtual-ips-and-service-proxies
        required: false
        type: string
      clusterIPs:
        description: >-
          ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
          
          This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        required: false
        type: list
        entry_schema:
          type: string
        metadata:
          x-kubernetes-list-type: atomic
      externalIPs:
        description: >-
          externalIPs is a list of IP addresses for which nodes in the cluster
          will also accept traffic for this service.  These IPs are not managed
          by Kubernetes.  The user is responsible for ensuring that traffic
          arrives at a node with this IP.  A common example is external load-
          balancers that are not part of the Kubernetes system.
        required: false
        type: list
        entry_schema:
          type: string
      externalName:
        description: >-
          externalName is the external reference that discovery mechanisms will
          return as an alias for this service (e.g. a DNS CNAME record). No
          proxying will be involved.  Must be a lowercase RFC-1123 hostname
          (https://tools.ietf.org/html/rfc1123) and requires `type` to be
          "ExternalName".
        required: false
        type: string
      externalTrafficPolicy:
        description: >-
          externalTrafficPolicy denotes if this Service desires to route
          external traffic to node-local or cluster-wide endpoints. "Local"
          preserves the client source IP and avoids a second hop for
          LoadBalancer and Nodeport type services, but risks potentially
          imbalanced traffic spreading. "Cluster" obscures the client source IP
          and may cause a second hop to another node, but should have good
          overall load-spreading.
        required: false
        type: string
      healthCheckNodePort:
        description: >-
          healthCheckNodePort specifies the healthcheck nodePort for the
          service. This only applies when type is set to LoadBalancer and
          externalTrafficPolicy is set to Local. If a value is specified, is in-
          range, and is not in use, it will be used.  If not specified, a value
          will be automatically allocated.  External systems (e.g. load-
          balancers) can use this port to determine if a given node holds
          endpoints for this service or not.  If this field is specified when
          creating a Service which does not need it, creation will fail. This
          field will be wiped when updating a Service to no longer need it (e.g.
          changing type).
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      internalTrafficPolicy:
        description: >-
          InternalTrafficPolicy specifies if the cluster internal traffic should
          be routed to all endpoints or node-local endpoints only. "Cluster"
          routes internal traffic to a Service to all endpoints. "Local" routes
          traffic to node-local endpoints only, traffic is dropped if no node-
          local endpoints are ready. The default value is "Cluster".
        required: false
        type: string
      ipFamilies:
        description: >-
          IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services. This field will be wiped when updating a Service to type ExternalName.
          
          This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
        required: false
        type: list
        entry_schema:
          type: string
        metadata:
          x-kubernetes-list-type: atomic
      ipFamilyPolicy:
        description: >-
          IPFamilyPolicy represents the dual-stack-ness requested or required by
          this Service. If there is no value provided, then this field will be
          set to SingleStack. Services can be "SingleStack" (a single IP
          family), "PreferDualStack" (two IP families on dual-stack configured
          clusters or a single IP family on single-stack clusters), or
          "RequireDualStack" (two IP families on dual-stack configured clusters,
          otherwise fail). The ipFamilies and clusterIPs fields depend on the
          value of this field. This field will be wiped when updating a service
          to type ExternalName.
        required: false
        type: string
      loadBalancerClass:
        description: >-
          loadBalancerClass is the class of the load balancer implementation
          this Service belongs to. If specified, the value of this field must be
          a label-style identifier, with an optional prefix, e.g. "internal-vip"
          or "example.com/internal-vip". Unprefixed names are reserved for end-
          users. This field can only be set when the Service type is
          'LoadBalancer'. If not set, the default load balancer implementation
          is used, today this is typically done through the cloud provider
          integration, but should apply for any default implementation. If set,
          it is assumed that a load balancer implementation is watching for
          Services with a matching class. Any default load balancer
          implementation (e.g. cloud providers) should ignore Services that set
          this field. This field can only be set when creating or updating a
          Service to type 'LoadBalancer'. Once set, it can not be changed. This
          field will be wiped when a service is updated to a non 'LoadBalancer'
          type.
        required: false
        type: string
      loadBalancerIP:
        description: >-
          Only applies to Service Type: LoadBalancer LoadBalancer will get
          created with the IP specified in this field. This feature depends on
          whether the underlying cloud-provider supports specifying the
          loadBalancerIP when a load balancer is created. This field will be
          ignored if the cloud-provider does not support the feature.
        required: false
        type: string
      loadBalancerSourceRanges:
        description: >-
          If specified and supported by the platform, this will restrict traffic
          through the cloud-provider load-balancer will be restricted to the
          specified client IPs. This field will be ignored if the cloud-provider
          does not support the feature." More info:
          https://kubernetes.io/docs/tasks/access-application-cluster/create-
          external-load-balancer/
        required: false
        type: list
        entry_schema:
          type: string
      ports:
        description: >-
          The list of ports that are exposed by this service. More info:
          https://kubernetes.io/docs/concepts/services-
          networking/service/#virtual-ips-and-service-proxies
        required: false
        type: list
        entry_schema:
          type: ServicePort
        metadata:
          x-kubernetes-list-map-keys: ['port', 'protocol']
          x-kubernetes-list-type: map
      publishNotReadyAddresses:
        description: >-
          publishNotReadyAddresses indicates that any agent which deals with
          endpoints for this Service should disregard any indications of
          ready/not-ready. The primary use case for setting this field is for a
          StatefulSet's Headless Service to propagate SRV DNS records for its
          Pods for the purpose of peer discovery. The Kubernetes controllers
          that generate Endpoints and EndpointSlice resources for Services
          interpret this to mean that all endpoints are considered "ready" even
          if the Pods themselves are not. Agents which consume only Kubernetes
          generated endpoints through the Endpoints or EndpointSlice resources
          can safely assume this behavior.
        required: false
        type: boolean
      selector:
        description: >-
          Route service traffic to pods with label keys and values matching this
          selector. If empty or not present, the service is assumed to have an
          external process managing its endpoints, which Kubernetes will not
          modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
          Ignored if type is ExternalName. More info:
          https://kubernetes.io/docs/concepts/services-networking/service/
        required: false
        type: map
        entry_schema:
          type: string
      sessionAffinity:
        description: >-
          Supports "ClientIP" and "None". Used to maintain session affinity.
          Enable client IP based session affinity. Must be ClientIP or None.
          Defaults to None. More info:
          https://kubernetes.io/docs/concepts/services-
          networking/service/#virtual-ips-and-service-proxies
        required: false
        type: string
      sessionAffinityConfig:
        description: sessionAffinityConfig contains the configurations of session affinity.
        required: false
        type: SessionAffinityConfig
      type:
        description: >-
          type determines how the Service is exposed. Defaults to ClusterIP.
          Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
          "ClusterIP" allocates a cluster-internal IP address for load-balancing
          to endpoints. Endpoints are determined by the selector or if that is
          not specified, by manual construction of an Endpoints object or
          EndpointSlice objects. If clusterIP is "None", no virtual IP is
          allocated and the endpoints are published as a set of endpoints rather
          than a virtual IP. "NodePort" builds on ClusterIP and allocates a port
          on every node which routes to the same endpoints as the clusterIP.
          "LoadBalancer" builds on NodePort and creates an external load-
          balancer (if supported in the current cloud) which routes to the same
          endpoints as the clusterIP. "ExternalName" aliases this service to the
          specified externalName. Several other fields do not apply to
          ExternalName services. More info:
          https://kubernetes.io/docs/concepts/services-
          networking/service/#publishing-services-service-types
        required: false
        type: string

  LimitRangeItem:
    description: >-
      LimitRangeItem defines a min/max usage limit for any resource that
      matches on kind.
    properties:
      default:
        description: >-
          Default resource requirement limit value by resource name if resource
          limit is omitted.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      defaultRequest:
        description: >-
          DefaultRequest is the default resource requirement request value by
          resource name if resource request is omitted.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      max:
        description: Max usage constraints on this kind by resource name.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      maxLimitRequestRatio:
        description: >-
          MaxLimitRequestRatio if specified, the named resource must have a
          request and limit that are both non-zero where limit divided by
          request is less than or equal to the enumerated value; this represents
          the max burst for the named resource.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      min:
        description: Min usage constraints on this kind by resource name.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      type:
        description: Type of resource that this limit applies to.
        required: true
        type: string

  LimitRangeSpec:
    description: >-
      LimitRangeSpec defines a min/max usage limit for resources that match
      on kind.
    properties:
      limits:
        description: Limits is the list of LimitRangeItem objects that are enforced.
        required: true
        type: list
        entry_schema:
          type: LimitRangeItem

  EventSource:
    description: EventSource contains information for an event.
    properties:
      component:
        description: Component from which the event is generated.
        required: false
        type: string
      host:
        description: Node name on which the event is generated.
        required: false
        type: string

  AzureFilePersistentVolumeSource:
    description: >-
      AzureFile represents an Azure File Service mount on the host and bind
      mount to the pod.
    properties:
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and Key
        required: true
        type: string
      secretNamespace:
        description: >-
          the namespace of the secret that contains Azure Storage Account Name
          and Key default is the same as the Pod
        required: false
        type: string
      shareName:
        description: Share Name
        required: true
        type: string

  SecretReference:
    description: >-
      SecretReference represents a Secret Reference. It has enough
      information to retrieve secret in any namespace
    properties:
      name:
        description: Name is unique within a namespace to reference a secret resource.
        required: false
        type: string
      namespace:
        description: >-
          Namespace defines the space within which the secret name must be
          unique.
        required: false
        type: string

  CephFSPersistentVolumeSource:
    description: >-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      monitors:
        description: >-
          Required: Monitors is a collection of Ceph monitors More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: true
        type: list
        entry_schema:
          type: string
      path:
        description: >-
          Optional: Used as the mounted root, rather than the full Ceph tree,
          default is /
        required: false
        type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: boolean
      secretFile:
        description: >-
          Optional: SecretFile is the path to key ring for User, default is
          /etc/ceph/user.secret More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: string
      secretRef:
        description: >-
          Optional: SecretRef is reference to the authentication secret for
          User, default is empty. More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: SecretReference
      user:
        description: >-
          Optional: User is the rados user name, default is admin More info:
          https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        required: false
        type: string

  CinderPersistentVolumeSource:
    description: >-
      Represents a cinder volume resource in Openstack. A Cinder volume must
      exist before mounting to a container. The volume must also be in the
      same region as the kubelet. Cinder volumes support ownership
      management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly
          inferred to be "ext4" if unspecified. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: false
        type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: false
        type: boolean
      secretRef:
        description: >-
          Optional: points to a secret object containing parameters used to
          connect to OpenStack.
        required: false
        type: SecretReference
      volumeID:
        description: >-
          volume id used to identify the volume in cinder. More info:
          https://examples.k8s.io/mysql-cinder-pd/README.md
        required: true
        type: string

  CSIPersistentVolumeSource:
    description: >-
      Represents storage that is managed by an external CSI volume driver
      (Beta feature)
    properties:
      controllerExpandSecretRef:
        description: >-
          ControllerExpandSecretRef is a reference to the secret object
          containing sensitive information to pass to the CSI driver to complete
          the CSI ControllerExpandVolume call. This is an alpha field and
          requires enabling ExpandCSIVolumes feature gate. This field is
          optional, and may be empty if no secret is required. If the secret
          object contains more than one secret, all secrets are passed.
        required: false
        type: SecretReference
      controllerPublishSecretRef:
        description: >-
          ControllerPublishSecretRef is a reference to the secret object
          containing sensitive information to pass to the CSI driver to complete
          the CSI ControllerPublishVolume and ControllerUnpublishVolume calls.
          This field is optional, and may be empty if no secret is required. If
          the secret object contains more than one secret, all secrets are
          passed.
        required: false
        type: SecretReference
      driver:
        description: Driver is the name of the driver to use for this volume. Required.
        required: true
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs".
        required: false
        type: string
      nodePublishSecretRef:
        description: >-
          NodePublishSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodePublishVolume and NodeUnpublishVolume calls. This field is
          optional, and may be empty if no secret is required. If the secret
          object contains more than one secret, all secrets are passed.
        required: false
        type: SecretReference
      nodeStageSecretRef:
        description: >-
          NodeStageSecretRef is a reference to the secret object containing
          sensitive information to pass to the CSI driver to complete the CSI
          NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This
          field is optional, and may be empty if no secret is required. If the
          secret object contains more than one secret, all secrets are passed.
        required: false
        type: SecretReference
      readOnly:
        description: >-
          Optional: The value to pass to ControllerPublishVolumeRequest.
          Defaults to false (read/write).
        required: false
        type: boolean
      volumeAttributes:
        description: Attributes of the volume to publish.
        required: false
        type: map
        entry_schema:
          type: string
      volumeHandle:
        description: >-
          VolumeHandle is the unique volume name returned by the CSI volume
          plugin’s CreateVolume to refer to the volume on all subsequent calls.
          Required.
        required: true
        type: string

  FlexPersistentVolumeSource:
    description: >-
      FlexPersistentVolumeSource represents a generic persistent volume
      resource that is provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        required: true
        type: string
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". The default
          filesystem depends on FlexVolume script.
        required: false
        type: string
      options:
        description: >-
          Optional: Extra command options if any.
        required: false
        type: map
        entry_schema:
          type: string
      readOnly:
        description: >-
          Optional: Defaults to false (read/write). ReadOnly here will force the
          ReadOnly setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          Optional: SecretRef is reference to the secret object containing
          sensitive information to pass to the plugin scripts. This may be empty
          if no secret object is specified. If the secret object contains more
          than one secret, all secrets are passed to the plugin scripts.
        required: false
        type: SecretReference

  GlusterfsPersistentVolumeSource:
    description: >-
      Represents a Glusterfs mount that lasts the lifetime of a pod.
      Glusterfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      endpoints:
        description: >-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-
          a-pod
        required: true
        type: string
      endpointsNamespace:
        description: >-
          EndpointsNamespace is the namespace that contains Glusterfs endpoint.
          If this field is empty, the EndpointNamespace defaults to the same
          namespace as the bound PVC. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        required: false
        type: string
      path:
        description: >-
          Path is the Glusterfs volume path. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        required: true
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the Glusterfs volume to be mounted with read-
          only permissions. Defaults to false. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        required: false
        type: boolean

  ISCSIPersistentVolumeSource:
    description: >-
      ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes
      can only be mounted as read/write once. ISCSI volumes support
      ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: whether support iSCSI Discovery CHAP authentication
        required: false
        type: boolean
      chapAuthSession:
        description: whether support iSCSI Session CHAP authentication
        required: false
        type: boolean
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        required: false
        type: string
      initiatorName:
        description: >-
          Custom iSCSI Initiator Name. If initiatorName is specified with
          iscsiInterface simultaneously, new iSCSI interface <target
          portal>:<volume name> will be created for the connection.
        required: false
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        required: true
        type: string
      iscsiInterface:
        description: >-
          iSCSI Interface Name that uses an iSCSI transport. Defaults to
          'default' (tcp).
        required: false
        type: string
      lun:
        description: iSCSI Target Lun number.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      portals:
        description: >-
          iSCSI Target Portal List. The Portal is either an IP or ip_addr:port
          if the port is other than default (typically TCP ports 860 and 3260).
        required: false
        type: list
        entry_schema:
          type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
        required: false
        type: boolean
      secretRef:
        description: CHAP Secret for iSCSI target and initiator authentication
        required: false
        type: SecretReference
      targetPortal:
        description: >-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the
          port is other than default (typically TCP ports 860 and 3260).
        required: true
        type: string

  LocalVolumeSource:
    description: >-
      Local represents directly-attached storage with node affinity (Beta
      feature)
    properties:
      fsType:
        description: >-
          Filesystem type to mount. It applies only when the Path is a block
          device. Must be a filesystem type supported by the host operating
          system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select
          a filesystem if unspecified.
        required: false
        type: string
      path:
        description: >-
          The full path to the volume on the node. It can be either a directory
          or block device (disk, partition, ...).
        required: true
        type: string

  VolumeNodeAffinity:
    description: >-
      VolumeNodeAffinity defines constraints that limit what nodes this
      volume can be accessed from.
    properties:
      required:
        description: Required specifies hard node constraints that must be met.
        required: false
        type: NodeSelector

  RBDPersistentVolumeSource:
    description: >-
      Represents a Rados Block Device mount that lasts the lifetime of a
      pod. RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: >-
          Filesystem type of the volume that you want to mount. Tip: Ensure that
          the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if
          unspecified. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#rbd
        required: false
        type: string
      image:
        description: >-
          The rados image name. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: true
        type: string
      keyring:
        description: >-
          Keyring is the path to key ring for RBDUser. Default is
          /etc/ceph/keyring. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string
      monitors:
        description: >-
          A collection of Ceph monitors. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: true
        type: list
        entry_schema:
          type: string
      pool:
        description: >-
          The rados pool name. Default is rbd. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string
      readOnly:
        description: >-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef is name of the authentication secret for RBDUser. If
          provided overrides keyring. Default is nil. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: SecretReference
      user:
        description: >-
          The rados user name. Default is admin. More info:
          https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        required: false
        type: string

  ScaleIOPersistentVolumeSource:
    description: ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
        required: false
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        required: true
        type: string
      protectionDomain:
        description: The name of the ScaleIO Protection Domain for the configured storage.
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef references to the secret for ScaleIO user and other
          sensitive information. If this is not provided, Login operation will
          fail.
        required: true
        type: SecretReference
      sslEnabled:
        description: Flag to enable/disable SSL communication with Gateway, default false
        required: false
        type: boolean
      storageMode:
        description: >-
          Indicates whether the storage for a volume should be ThickProvisioned
          or ThinProvisioned. Default is ThinProvisioned.
        required: false
        type: string
      storagePool:
        description: The ScaleIO Storage Pool associated with the protection domain.
        required: false
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        required: true
        type: string
      volumeName:
        description: >-
          The name of a volume already created in the ScaleIO system that is
          associated with this volume source.
        required: false
        type: string

  StorageOSPersistentVolumeSource:
    description: Represents a StorageOS persistent volume resource.
    properties:
      fsType:
        description: >-
          Filesystem type to mount. Must be a filesystem type supported by the
          host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred
          to be "ext4" if unspecified.
        required: false
        type: string
      readOnly:
        description: >-
          Defaults to false (read/write). ReadOnly here will force the ReadOnly
          setting in VolumeMounts.
        required: false
        type: boolean
      secretRef:
        description: >-
          SecretRef specifies the secret to use for obtaining the StorageOS API
          credentials.  If not specified, default values will be attempted.
        required: false
        type: ObjectReference
      volumeName:
        description: >-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        required: false
        type: string
      volumeNamespace:
        description: >-
          VolumeNamespace specifies the scope of the volume within StorageOS.
          If no namespace is specified then the Pod's namespace will be used.
          This allows the Kubernetes name scoping to be mirrored within
          StorageOS for tighter integration. Set VolumeName to any name to
          override the default behaviour. Set to "default" if you are not using
          namespaces within StorageOS. Namespaces that do not pre-exist within
          StorageOS will be created.
        required: false
        type: string

  PersistentVolumeSpec:
    description: PersistentVolumeSpec is the specification of a persistent volume.
    properties:
      accessModes:
        description: >-
          AccessModes contains all ways the volume can be mounted. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-
          modes
        required: false
        type: list
        entry_schema:
          type: string
      awsElasticBlockStore:
        description: >-
          AWSElasticBlockStore represents an AWS Disk resource that is attached
          to a kubelet's host machine and then exposed to the pod. More info: ht
          tps://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        required: false
        type: AWSElasticBlockStoreVolumeSource
      azureDisk:
        description: >-
          AzureDisk represents an Azure Data Disk mount on the host and bind
          mount to the pod.
        required: false
        type: AzureDiskVolumeSource
      azureFile:
        description: >-
          AzureFile represents an Azure File Service mount on the host and bind
          mount to the pod.
        required: false
        type: AzureFilePersistentVolumeSource
      capacity:
        description: >-
          A description of the persistent volume's resources and capacity. More
          info: https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#capacity
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      cephfs:
        description: >-
          CephFS represents a Ceph FS mount on the host that shares a pod's
          lifetime
        required: false
        type: CephFSPersistentVolumeSource
      cinder:
        description: >-
          Cinder represents a cinder volume attached and mounted on kubelets
          host machine. More info: https://examples.k8s.io/mysql-cinder-
          pd/README.md
        required: false
        type: CinderPersistentVolumeSource
      claimRef:
        description: >-
          ClaimRef is part of a bi-directional binding between PersistentVolume
          and PersistentVolumeClaim. Expected to be non-nil when bound.
          claim.VolumeName is the authoritative bind between PV and PVC. More
          info: https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#binding
        required: false
        type: ObjectReference
      csi:
        description: >-
          CSI represents storage that is handled by an external CSI driver (Beta
          feature).
        required: false
        type: CSIPersistentVolumeSource
      fc:
        description: >-
          FC represents a Fibre Channel resource that is attached to a kubelet's
          host machine and then exposed to the pod.
        required: false
        type: FCVolumeSource
      flexVolume:
        description: >-
          FlexVolume represents a generic volume resource that is
          provisioned/attached using an exec based plugin.
        required: false
        type: FlexPersistentVolumeSource
      flocker:
        description: >-
          Flocker represents a Flocker volume attached to a kubelet's host
          machine and exposed to the pod for its usage. This depends on the
          Flocker control service being running
        required: false
        type: FlockerVolumeSource
      gcePersistentDisk:
        description: >-
          GCEPersistentDisk represents a GCE Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. Provisioned by an
          admin. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        required: false
        type: GCEPersistentDiskVolumeSource
      glusterfs:
        description: >-
          Glusterfs represents a Glusterfs volume that is attached to a host and
          exposed to the pod. Provisioned by an admin. More info:
          https://examples.k8s.io/volumes/glusterfs/README.md
        required: false
        type: GlusterfsPersistentVolumeSource
      hostPath:
        description: >-
          HostPath represents a directory on the host. Provisioned by a
          developer or tester. This is useful for single-node development and
          testing only! On-host storage is not supported in any way and WILL NOT
          WORK in a multi-node cluster. More info:
          https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        required: false
        type: HostPathVolumeSource
      iscsi:
        description: >-
          ISCSI represents an ISCSI Disk resource that is attached to a
          kubelet's host machine and then exposed to the pod. Provisioned by an
          admin.
        required: false
        type: ISCSIPersistentVolumeSource
      local:
        description: Local represents directly-attached storage with node affinity
        required: false
        type: LocalVolumeSource
      mountOptions:
        description: >-
          A list of mount options, e.g. ["ro", "soft"]. Not validated - mount
          will simply fail if one is invalid. More info:
          https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-
          options
        required: false
        type: list
        entry_schema:
          type: string
      nfs:
        description: >-
          NFS represents an NFS mount on the host. Provisioned by an admin. More
          info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        required: false
        type: NFSVolumeSource
      nodeAffinity:
        description: >-
          NodeAffinity defines constraints that limit what nodes this volume can
          be accessed from. This field influences the scheduling of pods that
          use this volume.
        required: false
        type: VolumeNodeAffinity
      persistentVolumeReclaimPolicy:
        description: >-
          What happens to a persistent volume when released from its claim.
          Valid options are Retain (default for manually created
          PersistentVolumes), Delete (default for dynamically provisioned
          PersistentVolumes), and Recycle (deprecated). Recycle must be
          supported by the volume plugin underlying this PersistentVolume. More
          info: https://kubernetes.io/docs/concepts/storage/persistent-
          volumes#reclaiming
        required: false
        type: string
      photonPersistentDisk:
        description: >-
          PhotonPersistentDisk represents a PhotonController persistent disk
          attached and mounted on kubelets host machine
        required: false
        type: PhotonPersistentDiskVolumeSource
      portworxVolume:
        description: >-
          PortworxVolume represents a portworx volume attached and mounted on
          kubelets host machine
        required: false
        type: PortworxVolumeSource
      quobyte:
        description: >-
          Quobyte represents a Quobyte mount on the host that shares a pod's
          lifetime
        required: false
        type: QuobyteVolumeSource
      rbd:
        description: >-
          RBD represents a Rados Block Device mount on the host that shares a
          pod's lifetime. More info:
          https://examples.k8s.io/volumes/rbd/README.md
        required: false
        type: RBDPersistentVolumeSource
      scaleIO:
        description: >-
          ScaleIO represents a ScaleIO persistent volume attached and mounted on
          Kubernetes nodes.
        required: false
        type: ScaleIOPersistentVolumeSource
      storageClassName:
        description: >-
          Name of StorageClass to which this persistent volume belongs. Empty
          value means that this volume does not belong to any StorageClass.
        required: false
        type: string
      storageos:
        description: >-
          StorageOS represents a StorageOS volume that is attached to the
          kubelet's host machine and mounted into the pod More info:
          https://examples.k8s.io/volumes/storageos/README.md
        required: false
        type: StorageOSPersistentVolumeSource
      volumeMode:
        description: >-
          volumeMode defines if a volume is intended to be used with a formatted
          filesystem or to remain in raw block state. Value of Filesystem is
          implied when not included in spec.
        required: false
        type: string
      vsphereVolume:
        description: >-
          VsphereVolume represents a vSphere volume attached and mounted on
          kubelets host machine
        required: false
        type: VsphereVirtualDiskVolumeSource

  PortStatus:
    properties:
      error:
        description: >-
          Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
          CamelCase names
          - cloud provider specific error values must have names that comply with the
          format foo.example.com/CamelCase.
        required: false
        type: string
      port:
        description: >-
          Port is the port number of the service port of which status is
          recorded here
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      protocol:
        description: >-
          Protocol is the protocol of the service port of which status is
          recorded here The supported values are: "TCP", "UDP", "SCTP"
        required: true
        type: string

  LoadBalancerIngress:
    description: >-
      LoadBalancerIngress represents the status of a load-balancer ingress
      point: traffic intended for the service should be sent to an ingress
      point.
    properties:
      hostname:
        description: >-
          Hostname is set for load-balancer ingress points that are DNS based
          (typically AWS load-balancers)
        required: false
        type: string
      ip:
        description: >-
          IP is set for load-balancer ingress points that are IP based
          (typically GCE or OpenStack load-balancers)
        required: false
        type: string
      ports:
        description: >-
          Ports is a list of records of service ports If used, every port
          defined in the service should have an entry in it
        required: false
        type: list
        entry_schema:
          type: PortStatus
        metadata:
          x-kubernetes-list-type: atomic

  LoadBalancerStatus:
    description: LoadBalancerStatus represents the status of a load-balancer.
    properties:
      ingress:
        description: >-
          Ingress is a list containing ingress points for the load-balancer.
          Traffic intended for the service should be sent to these ingress
          points.
        required: false
        type: list
        entry_schema:
          type: LoadBalancerIngress

  ServiceStatus:
    description: ServiceStatus represents the current status of a service.
    properties:
      conditions:
        description: Current service state
        required: false
        type: list
        entry_schema:
          type: meta:Condition
        metadata:
          x-kubernetes-list-map-keys: ['type']
          x-kubernetes-list-type: map
      loadBalancer:
        description: >-
          LoadBalancer contains the current status of the load-balancer, if one
          is present.
        required: false
        type: LoadBalancerStatus

  Taint:
    description: >-
      The node this Taint is attached to has the "effect" on any pod that
      does not tolerate the Taint.
    properties:
      effect:
        description: >-
          Required. The effect of the taint on pods that do not tolerate the
          taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        required: true
        type: string
      key:
        description: Required. The taint key to be applied to a node.
        required: true
        type: string
      timeAdded:
        description: >-
          TimeAdded represents the time at which the taint was added. It is only
          written for NoExecute taints.
        required: false
        type: meta:Time
      value:
        description: The taint value corresponding to the taint key.
        required: false
        type: string

  NodeSpec:
    description: NodeSpec describes the attributes that a node is created with.
    properties:
      configSource:
        description: >-
          Deprecated. If specified, the source of the node's configuration. The
          DynamicKubeletConfig feature gate must be enabled for the Kubelet to
          use this field. This field is deprecated as of 1.22:
          https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-
          configuration
        required: false
        type: NodeConfigSource
      externalID:
        description: >-
          Deprecated. Not all kubelets will set this field. Remove field after
          1.13. see: https://issues.k8s.io/61966
        required: false
        type: string
      podCIDR:
        description: PodCIDR represents the pod IP range assigned to the node.
        required: false
        type: string
      podCIDRs:
        description: >-
          podCIDRs represents the IP ranges assigned to the node for usage by
          Pods on that node. If this field is specified, the 0th entry must
          match the podCIDR field. It may contain at most 1 value for each of
          IPv4 and IPv6.
        required: false
        type: list
        entry_schema:
          type: string
      providerID:
        description: >-
          ID of the node assigned by the cloud provider in the format:
          <ProviderName>://<ProviderSpecificNodeID>
        required: false
        type: string
      taints:
        description: >-
          If specified, the node's taints.
        required: false
        type: list
        entry_schema:
          type: Taint
      unschedulable:
        description: >-
          Unschedulable controls node schedulability of new pods. By default,
          node is schedulable. More info:
          https://kubernetes.io/docs/concepts/nodes/node/#manual-node-
          administration
        required: false
        type: boolean

  ReplicationControllerCondition:
    description: >-
      ReplicationControllerCondition describes the state of a replication
      controller at a certain point.
    properties:
      lastTransitionTime:
        description: The last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: A human readable message indicating details about the transition.
        required: false
        type: string
      reason:
        description: >-
          The reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of replication controller condition.
        required: true
        type: string

  ReplicationControllerStatus:
    description: >-
      ReplicationControllerStatus represents the current status of a
      replication controller.
    properties:
      availableReplicas:
        description: >-
          The number of available replicas (ready for at least minReadySeconds)
          for this replication controller.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      conditions:
        description: >-
          Represents the latest available observations of a replication
          controller's current state.
        required: false
        type: list
        entry_schema:
          type: ReplicationControllerCondition
      fullyLabeledReplicas:
        description: >-
          The number of pods that have labels matching the labels of the pod
          template of the replication controller.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      observedGeneration:
        description: >-
          ObservedGeneration reflects the generation of the most recently
          observed replication controller.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      readyReplicas:
        description: The number of ready replicas for this replication controller.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Replicas is the most recently oberved number of replicas. More info: h
          ttps://kubernetes.io/docs/concepts/workloads/controllers/replicationco
          ntroller#what-is-a-replicationcontroller
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  NamespaceCondition:
    description: NamespaceCondition contains details about state of namespace.
    properties:
      lastTransitionTime:
        required: false
        type: meta:Time
      message:
        required: false
        type: string
      reason:
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of namespace controller condition.
        required: true
        type: string

  NamespaceStatus:
    description: >-
      NamespaceStatus is information about the current status of a
      Namespace.
    properties:
      conditions:
        description: >-
          Represents the latest available observations of a namespace's current
          state.
        required: false
        type: list
        entry_schema:
          type: NamespaceCondition
      phase:
        description: >-
          Phase is the current lifecycle phase of the namespace. More info:
          https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
        required: false
        type: string

  ResourceQuotaStatus:
    description: ResourceQuotaStatus defines the enforced hard limits and observed use.
    properties:
      hard:
        description: >-
          Hard is the set of enforced hard limits for each named resource. More
          info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      used:
        description: >-
          Used is the current observed total usage of the resource in the
          namespace.
        required: false
        type: map
        entry_schema:
          type: resource:Quantity

  EndpointAddress:
    description: EndpointAddress is a tuple that describes single IP address.
    properties:
      hostname:
        description: The Hostname of this endpoint
        required: false
        type: string
      ip:
        description: >-
          The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local
          (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is
          also accepted but not fully supported on all platforms. Also, certain
          kubernetes components, like kube-proxy, are not IPv6 ready.
        required: true
        type: string
      nodeName:
        description: >-
          Optional: Node hosting this endpoint. This can be used to determine
          endpoints local to a node.
        required: false
        type: string
      targetRef:
        description: Reference to object providing the endpoint.
        required: false
        type: ObjectReference

  EndpointPort:
    description: EndpointPort is a tuple that describes a single port.
    properties:
      appProtocol:
        description: >-
          The application protocol for this port. This field follows standard
          Kubernetes label syntax. Un-prefixed names are reserved for IANA
          standard service names (as per RFC-6335 and
          http://www.iana.org/assignments/service-names). Non-standard protocols
          should use prefixed names such as mycompany.com/my-custom-protocol.
        required: false
        type: string
      name:
        description: >-
          The name of this port.  This must match the 'name' field in the
          corresponding ServicePort. Must be a DNS_LABEL. Optional only if one
          port is defined.
        required: false
        type: string
      port:
        description: The port number of the endpoint.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      protocol:
        description: >-
          The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is
          TCP.
        required: false
        type: string

  EndpointSubset:
    description: >-
      EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
      {
      Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
      Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
      }
      The resulting set of endpoints can be viewed as:
      a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
      b: [ 10.10.1.1:309, 10.10.2.2:309 ]
    properties:
      addresses:
        description: >-
          IP addresses which offer the related ports that are marked as ready.
          These endpoints should be considered safe for load balancers and
          clients to utilize.
        required: false
        type: list
        entry_schema:
          type: EndpointAddress
      notReadyAddresses:
        description: >-
          IP addresses which offer the related ports but are not currently
          marked as ready because they have not yet finished starting, have
          recently failed a readiness check, or have recently failed a liveness
          check.
        required: false
        type: list
        entry_schema:
          type: EndpointAddress
      ports:
        description: Port numbers available on the related IP addresses.
        required: false
        type: list
        entry_schema:
          type: EndpointPort

  TopologySelectorLabelRequirement:
    description: >-
      A topology selector requirement is a selector that matches given
      label. This is an alpha feature and may change in the future.
    properties:
      key:
        description: The label key that the selector applies to.
        required: true
        type: string
      values:
        description: >-
          An array of string values. One value must match the label to be
          selected. Each entry in Values is ORed.
        required: true
        type: list
        entry_schema:
          type: string

  TopologySelectorTerm:
    description: >-
      A topology selector term represents the result of label queries. A
      null or empty topology selector term matches no objects. The
      requirements of them are ANDed. It provides a subset of functionality
      as NodeSelectorTerm. This is an alpha feature and may change in the
      future.
    properties:
      matchLabelExpressions:
        description: A list of topology selector requirements by labels.
        required: false
        type: list
        entry_schema:
          type: TopologySelectorLabelRequirement

  ScopedResourceSelectorRequirement:
    description: >-
      A scoped-resource selector requirement is a selector that contains
      values, a scope name, and an operator that relates the scope name and
      values.
    properties:
      operator:
        description: >-
          Represents a scope's relationship to a set of values. Valid operators
          are In, NotIn, Exists, DoesNotExist.
        required: true
        type: string
      scopeName:
        description: The name of the scope that the selector applies to.
        required: true
        type: string
      values:
        description: >-
          An array of string values. If the operator is In or NotIn, the values
          array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a
          strategic merge patch.
        required: false
        type: list
        entry_schema:
          type: string

  ScopeSelector:
    description: >-
      A scope selector represents the AND of the selectors represented by
      the scoped-resource selector requirements.
    properties:
      matchExpressions:
        description: A list of scope selector requirements by scope of the resources.
        required: false
        type: list
        entry_schema:
          type: ScopedResourceSelectorRequirement

  ResourceQuotaSpec:
    description: >-
      ResourceQuotaSpec defines the desired hard limits to enforce for
      Quota.
    properties:
      hard:
        description: >-
          hard is the set of desired hard limits for each named resource. More
          info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
        required: false
        type: map
        entry_schema:
          type: resource:Quantity
      scopeSelector:
        description: >-
          scopeSelector is also a collection of filters like scopes that must
          match each object tracked by a quota but expressed using
          ScopeSelectorOperator in combination with possible values. For a
          resource to match, both scopes AND scopeSelector (if specified in
          spec), must be matched.
        required: false
        type: ScopeSelector
      scopes:
        description: >-
          A collection of filters that must match each object tracked by a
          quota. If not specified, the quota matches all objects.
        required: false
        type: list
        entry_schema:
          type: string

