tosca_definitions_version: tosca_simple_yaml_1_3

# This template was auto-generated by swagger2tosca

namespace: io.k8s.api.apps

metadata:
  title: Kubernetes
  version: unversioned

imports:
  - file: io.k8s.apimachinery.pkg.runtime
    namespace_prefix: runtime
  - file: io.k8s.apimachinery.pkg.apis.meta
    namespace_prefix: meta
  - file: io.k8s.api.core
    namespace_prefix: core
  - file: io.k8s.apimachinery.pkg.util.intstr
    namespace_prefix: intstr

node_types:

  ControllerRevision:
    description: >-
      ControllerRevision implements an immutable snapshot of state data.
      Clients are responsible for serializing and deserializing the objects
      that contain their internal state. Once a ControllerRevision has been
      successfully created, it can not be updated. The API Server will fail
      validation of all requests that attempt to mutate the Data field.
      ControllerRevisions may, however, be deleted. Note that, due to its
      use by both the DaemonSet and StatefulSet controllers for update and
      rollback, this object is beta. However, it may be subject to name and
      representation changes in future releases, and clients should not
      depend on its stability. It is primarily for internal use by
      controllers.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      data:
        description: Data is the serialized representation of the state.
        required: false
        type: runtime:RawExtension
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      revision:
        description: Revision indicates the revision of the state represented by Data.
        required: true
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]

  DaemonSet:
    description: DaemonSet represents the configuration of a daemon set.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          The desired behavior of this daemon set. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: DaemonSetSpec
      status:
        description: >-
          The current status of this daemon set. This data may be out of date by
          some window of time. Populated by the system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: DaemonSetStatus

  Deployment:
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: Specification of the desired behavior of the Deployment.
        required: false
        type: DeploymentSpec
      status:
        description: Most recently observed status of the Deployment.
        required: false
        type: DeploymentStatus

  ReplicaSet:
    description: >-
      ReplicaSet ensures that a specified number of pod replicas are running
      at any given time.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          If the Labels of a ReplicaSet are empty, they are defaulted to be the
          same as the Pod(s) that the ReplicaSet manages. Standard object's
          metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: >-
          Spec defines the specification of the desired behavior of the
          ReplicaSet. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ReplicaSetSpec
      status:
        description: >-
          Status is the most recently observed status of the ReplicaSet. This
          data may be out of date by some window of time. Populated by the
          system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#spec-and-status
        required: false
        type: ReplicaSetStatus

  StatefulSet:
    description: >-
      StatefulSet represents a set of pods with consistent identities. Identities are defined as:
      - Network: A single stable DNS and hostname.
      - Storage: As many VolumeClaims as requested.
      The StatefulSet guarantees that a given network identity will always map to the same storage identity.
    derived_from: tosca.nodes.Root
    metadata:
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#metadata
        required: false
        type: meta:ObjectMeta
      spec:
        description: Spec defines the desired identities of pods in this set.
        required: false
        type: StatefulSetSpec
      status:
        description: >-
          Status is the current status of Pods in this StatefulSet. This data
          may be out of date by some window of time.
        required: false
        type: StatefulSetStatus

data_types:

  RollingUpdateDaemonSet:
    description: Spec to control the desired behavior of daemon set rolling update.
    properties:
      maxSurge:
        description: >-
          The maximum number of nodes with an existing available DaemonSet pod
          that can have an updated DaemonSet pod during during an update. Value
          can be an absolute number (ex: 5) or a percentage of desired pods (ex:
          10%). This can not be 0 if MaxUnavailable is 0. Absolute number is
          calculated from percentage by rounding up to a minimum of 1. Default
          value is 0. Example: when this is set to 30%, at most 30% of the total
          number of nodes that should be running the daemon pod (i.e.
          status.desiredNumberScheduled) can have their a new pod created before
          the old pod is marked as deleted. The update starts by launching new
          pods on 30% of nodes. Once an updated pod is available (Ready for at
          least minReadySeconds) the old DaemonSet pod on that node is marked
          deleted. If the old pod becomes unavailable for any reason (Ready
          transitions to false, is evicted, or is drained) an updated pod is
          immediatedly created on that node without considering surge limits.
          Allowing surge implies the possibility that the resources consumed by
          the daemonset on any given node can double if the readiness check
          fails, and so resource intensive daemonsets should take into account
          that they may cause evictions during disruption. This is beta field
          and enabled/disabled by DaemonSetUpdateSurge feature gate.
        required: false
        type: intstr:IntOrString
      maxUnavailable:
        description: >-
          The maximum number of DaemonSet pods that can be unavailable during
          the update. Value can be an absolute number (ex: 5) or a percentage of
          total number of DaemonSet pods at the start of the update (ex: 10%).
          Absolute number is calculated from percentage by rounding up. This
          cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is
          set to 30%, at most 30% of the total number of nodes that should be
          running the daemon pod (i.e. status.desiredNumberScheduled) can have
          their pods stopped for an update at any given time. The update starts
          by stopping at most 30% of those DaemonSet pods and then brings up new
          DaemonSet pods in their place. Once the new pods are available, it
          then proceeds onto other DaemonSet pods, thus ensuring that at least
          70% of original number of DaemonSet pods are available at all times
          during the update.
        required: false
        type: intstr:IntOrString

  DaemonSetUpdateStrategy:
    description: >-
      DaemonSetUpdateStrategy is a struct used to control the update
      strategy for a DaemonSet.
    properties:
      rollingUpdate:
        description: Rolling update config params. Present only if type = "RollingUpdate".
        required: false
        type: RollingUpdateDaemonSet
      type:
        description: >-
          Type of daemon set update. Can be "RollingUpdate" or "OnDelete".
          Default is RollingUpdate.
        required: false
        type: string

  DaemonSetSpec:
    description: DaemonSetSpec is the specification of a daemon set.
    properties:
      minReadySeconds:
        description: >-
          The minimum number of seconds for which a newly created DaemonSet pod
          should be ready without any of its container crashing, for it to be
          considered available. Defaults to 0 (pod will be considered available
          as soon as it is ready).
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      revisionHistoryLimit:
        description: >-
          The number of old history to retain to allow rollback. This is a
          pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      selector:
        description: >-
          A label query over pods that are managed by the daemon set. Must match
          in order to be controlled. It must match the pod template's labels.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-
          objects/labels/#label-selectors
        required: true
        type: meta:LabelSelector
      template:
        description: >-
          An object that describes the pod that will be created. The DaemonSet
          will create exactly one copy of this pod on every node that matches
          the template's node selector (or on every node if no node selector is
          specified). More info: https://kubernetes.io/docs/concepts/workloads/c
          ontrollers/replicationcontroller#pod-template
        required: true
        type: core:PodTemplateSpec
      updateStrategy:
        description: An update strategy to replace existing DaemonSet pods with new pods.
        required: false
        type: DaemonSetUpdateStrategy

  ReplicaSetSpec:
    description: ReplicaSetSpec is the specification of a ReplicaSet.
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be
          ready without any of its container crashing, for it to be considered
          available. Defaults to 0 (pod will be considered available as soon as
          it is ready)
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Replicas is the number of desired replicas. This is a pointer to
          distinguish between explicit zero and unspecified. Defaults to 1. More
          info: https://kubernetes.io/docs/concepts/workloads/controllers/replic
          ationcontroller/#what-is-a-replicationcontroller
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      selector:
        description: >-
          Selector is a label query over pods that should match the replica
          count. Label keys and values that must match in order to be controlled
          by this replica set. It must match the pod template's labels. More
          info: https://kubernetes.io/docs/concepts/overview/working-with-
          objects/labels/#label-selectors
        required: true
        type: meta:LabelSelector
      template:
        description: >-
          Template is the object that describes the pod that will be created if
          insufficient replicas are detected. More info: https://kubernetes.io/d
          ocs/concepts/workloads/controllers/replicationcontroller#pod-template
        required: false
        type: core:PodTemplateSpec

  RollingUpdateDeployment:
    description: Spec to control the desired behavior of rolling update.
    properties:
      maxSurge:
        description: >-
          The maximum number of pods that can be scheduled above the desired
          number of pods. Value can be an absolute number (ex: 5) or a
          percentage of desired pods (ex: 10%). This can not be 0 if
          MaxUnavailable is 0. Absolute number is calculated from percentage by
          rounding up. Defaults to 25%. Example: when this is set to 30%, the
          new ReplicaSet can be scaled up immediately when the rolling update
          starts, such that the total number of old and new pods do not exceed
          130% of desired pods. Once old pods have been killed, new ReplicaSet
          can be scaled up further, ensuring that total number of pods running
          at any time during the update is at most 130% of desired pods.
        required: false
        type: intstr:IntOrString
      maxUnavailable:
        description: >-
          The maximum number of pods that can be unavailable during the update.
          Value can be an absolute number (ex: 5) or a percentage of desired
          pods (ex: 10%). Absolute number is calculated from percentage by
          rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%.
          Example: when this is set to 30%, the old ReplicaSet can be scaled
          down to 70% of desired pods immediately when the rolling update
          starts. Once new pods are ready, old ReplicaSet can be scaled down
          further, followed by scaling up the new ReplicaSet, ensuring that the
          total number of pods available at all times during the update is at
          least 70% of desired pods.
        required: false
        type: intstr:IntOrString

  DeploymentStrategy:
    description: >-
      DeploymentStrategy describes how to replace existing pods with new
      ones.
    properties:
      rollingUpdate:
        description: >-
          Rolling update config params. Present only if DeploymentStrategyType =
          RollingUpdate.
        required: false
        type: RollingUpdateDeployment
      type:
        description: >-
          Type of deployment. Can be "Recreate" or "RollingUpdate". Default is
          RollingUpdate.
        required: false
        type: string

  DeploymentSpec:
    description: >-
      DeploymentSpec is the specification of the desired behavior of the
      Deployment.
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be
          ready without any of its container crashing, for it to be considered
          available. Defaults to 0 (pod will be considered available as soon as
          it is ready)
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      paused:
        description: Indicates that the deployment is paused.
        required: false
        type: boolean
      progressDeadlineSeconds:
        description: >-
          The maximum time in seconds for a deployment to make progress before
          it is considered to be failed. The deployment controller will continue
          to process failed deployments and a condition with a
          ProgressDeadlineExceeded reason will be surfaced in the deployment
          status. Note that progress will not be estimated during the time a
          deployment is paused. Defaults to 600s.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Number of desired pods. This is a pointer to distinguish between
          explicit zero and not specified. Defaults to 1.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      revisionHistoryLimit:
        description: >-
          The number of old ReplicaSets to retain to allow rollback. This is a
          pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      selector:
        description: >-
          Label selector for pods. Existing ReplicaSets whose pods are selected
          by this will be the ones affected by this deployment. It must match
          the pod template's labels.
        required: true
        type: meta:LabelSelector
      strategy:
        description: The deployment strategy to use to replace existing pods with new ones.
        required: false
        type: DeploymentStrategy
      template:
        description: Template describes the pods that will be created.
        required: true
        type: core:PodTemplateSpec

  DaemonSetCondition:
    description: >-
      DaemonSetCondition describes the state of a DaemonSet at a certain
      point.
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: A human readable message indicating details about the transition.
        required: false
        type: string
      reason:
        description: >-
          The reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of DaemonSet condition.
        required: true
        type: string

  DaemonSetStatus:
    description: DaemonSetStatus represents the current status of a daemon set.
    properties:
      collisionCount:
        description: >-
          Count of hash collisions for the DaemonSet. The DaemonSet controller
          uses this field as a collision avoidance mechanism when it needs to
          create the name for the newest ControllerRevision.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      conditions:
        description: >-
          Represents the latest available observations of a DaemonSet's current
          state.
        required: false
        type: list
        entry_schema:
          type: DaemonSetCondition
      currentNumberScheduled:
        description: >-
          The number of nodes that are running at least 1 daemon pod and are
          supposed to run the daemon pod. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      desiredNumberScheduled:
        description: >-
          The total number of nodes that should be running the daemon pod
          (including nodes correctly running the daemon pod). More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      numberAvailable:
        description: >-
          The number of nodes that should be running the daemon pod and have one
          or more of the daemon pod running and available (ready for at least
          spec.minReadySeconds)
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      numberMisscheduled:
        description: >-
          The number of nodes that are running the daemon pod, but are not
          supposed to run the daemon pod. More info:
          https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      numberReady:
        description: >-
          numberReady is the number of nodes that should be running the daemon
          pod and have one or more of the daemon pod running with a Ready
          Condition.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      numberUnavailable:
        description: >-
          The number of nodes that should be running the daemon pod and have
          none of the daemon pod running and available (ready for at least
          spec.minReadySeconds)
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      observedGeneration:
        description: The most recent generation observed by the daemon set controller.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      updatedNumberScheduled:
        description: The total number of nodes that are running updated daemon pod
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  DeploymentCondition:
    description: >-
      DeploymentCondition describes the state of a deployment at a certain
      point.
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      lastUpdateTime:
        description: The last time this condition was updated.
        required: false
        type: meta:Time
      message:
        description: A human readable message indicating details about the transition.
        required: false
        type: string
      reason:
        description: >-
          The reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of deployment condition.
        required: true
        type: string

  DeploymentStatus:
    description: >-
      DeploymentStatus is the most recently observed status of the
      Deployment.
    properties:
      availableReplicas:
        description: >-
          Total number of available pods (ready for at least minReadySeconds)
          targeted by this deployment.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      collisionCount:
        description: >-
          Count of hash collisions for the Deployment. The Deployment controller
          uses this field as a collision avoidance mechanism when it needs to
          create the name for the newest ReplicaSet.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      conditions:
        description: >-
          Represents the latest available observations of a deployment's current
          state.
        required: false
        type: list
        entry_schema:
          type: DeploymentCondition
      observedGeneration:
        description: The generation observed by the deployment controller.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      readyReplicas:
        description: >-
          readyReplicas is the number of pods targeted by this Deployment with a
          Ready Condition.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Total number of non-terminated pods targeted by this deployment (their
          labels match the selector).
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      unavailableReplicas:
        description: >-
          Total number of unavailable pods targeted by this deployment. This is
          the total number of pods that are still required for the deployment to
          have 100% available capacity. They may either be pods that are running
          but not yet available or pods that still have not been created.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      updatedReplicas:
        description: >-
          Total number of non-terminated pods targeted by this deployment that
          have the desired template spec.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  StatefulSetCondition:
    description: >-
      StatefulSetCondition describes the state of a statefulset at a certain
      point.
    properties:
      lastTransitionTime:
        description: Last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: A human readable message indicating details about the transition.
        required: false
        type: string
      reason:
        description: >-
          The reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of statefulset condition.
        required: true
        type: string

  StatefulSetStatus:
    description: StatefulSetStatus represents the current state of a StatefulSet.
    properties:
      availableReplicas:
        description: >-
          Total number of available pods (ready for at least minReadySeconds)
          targeted by this statefulset. This is a beta field and
          enabled/disabled by StatefulSetMinReadySeconds feature gate.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      collisionCount:
        description: >-
          collisionCount is the count of hash collisions for the StatefulSet.
          The StatefulSet controller uses this field as a collision avoidance
          mechanism when it needs to create the name for the newest
          ControllerRevision.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      conditions:
        description: >-
          Represents the latest available observations of a statefulset's
          current state.
        required: false
        type: list
        entry_schema:
          type: StatefulSetCondition
      currentReplicas:
        description: >-
          currentReplicas is the number of Pods created by the StatefulSet
          controller from the StatefulSet version indicated by currentRevision.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      currentRevision:
        description: >-
          currentRevision, if not empty, indicates the version of the
          StatefulSet used to generate Pods in the sequence [0,currentReplicas).
        required: false
        type: string
      observedGeneration:
        description: >-
          observedGeneration is the most recent generation observed for this
          StatefulSet. It corresponds to the StatefulSet's generation, which is
          updated on mutation by the API Server.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      readyReplicas:
        description: >-
          readyReplicas is the number of pods created for this StatefulSet with
          a Ready Condition.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: replicas is the number of Pods created by the StatefulSet controller.
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      updateRevision:
        description: >-
          updateRevision, if not empty, indicates the version of the StatefulSet
          used to generate Pods in the sequence [replicas-
          updatedReplicas,replicas)
        required: false
        type: string
      updatedReplicas:
        description: >-
          updatedReplicas is the number of Pods created by the StatefulSet
          controller from the StatefulSet version indicated by updateRevision.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  RollingUpdateStatefulSetStrategy:
    description: >-
      RollingUpdateStatefulSetStrategy is used to communicate parameter for
      RollingUpdateStatefulSetStrategyType.
    properties:
      partition:
        description: >-
          Partition indicates the ordinal at which the StatefulSet should be
          partitioned. Default value is 0.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

  StatefulSetUpdateStrategy:
    description: >-
      StatefulSetUpdateStrategy indicates the strategy that the StatefulSet
      controller will use to perform updates. It includes any additional
      parameters necessary to perform the update for the indicated strategy.
    properties:
      rollingUpdate:
        description: >-
          RollingUpdate is used to communicate parameters when Type is
          RollingUpdateStatefulSetStrategyType.
        required: false
        type: RollingUpdateStatefulSetStrategy
      type:
        description: >-
          Type indicates the type of the StatefulSetUpdateStrategy. Default is
          RollingUpdate.
        required: false
        type: string

  StatefulSetSpec:
    description: A StatefulSetSpec is the specification of a StatefulSet.
    properties:
      minReadySeconds:
        description: >-
          Minimum number of seconds for which a newly created pod should be
          ready without any of its container crashing for it to be considered
          available. Defaults to 0 (pod will be considered available as soon as
          it is ready) This is an alpha field and requires enabling
          StatefulSetMinReadySeconds feature gate.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      podManagementPolicy:
        description: >-
          podManagementPolicy controls how pods are created during initial scale
          up, when replacing pods on nodes, or when scaling down. The default
          policy is `OrderedReady`, where pods are created in increasing order
          (pod-0, then pod-1, etc) and the controller will wait until each pod
          is ready before continuing. When scaling down, the pods are removed in
          the opposite order. The alternative policy is `Parallel` which will
          create pods in parallel to match the desired scale without waiting,
          and on scale down will delete all pods at once.
        required: false
        type: string
      replicas:
        description: >-
          replicas is the desired number of replicas of the given Template.
          These are replicas in the sense that they are instantiations of the
          same Template, but individual replicas also have a consistent
          identity. If unspecified, defaults to 1.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      revisionHistoryLimit:
        description: >-
          revisionHistoryLimit is the maximum number of revisions that will be
          maintained in the StatefulSet's revision history. The revision history
          consists of all revisions not represented by a currently applied
          StatefulSetSpec version. The default value is 10.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      selector:
        description: >-
          selector is a label query over pods that should match the replica
          count. It must match the pod template's labels. More info:
          https://kubernetes.io/docs/concepts/overview/working-with-
          objects/labels/#label-selectors
        required: true
        type: meta:LabelSelector
      serviceName:
        description: >-
          serviceName is the name of the service that governs this StatefulSet.
          This service must exist before the StatefulSet, and is responsible for
          the network identity of the set. Pods get DNS/hostnames that follow
          the pattern: pod-specific-string.serviceName.default.svc.cluster.local
          where "pod-specific-string" is managed by the StatefulSet controller.
        required: true
        type: string
      template:
        description: >-
          template is the object that describes the pod that will be created if
          insufficient replicas are detected. Each pod stamped out by the
          StatefulSet will fulfill this Template, but have a unique identity
          from the rest of the StatefulSet.
        required: true
        type: core:PodTemplateSpec
      updateStrategy:
        description: >-
          updateStrategy indicates the StatefulSetUpdateStrategy that will be
          employed to update Pods in the StatefulSet when a revision is made to
          Template.
        required: false
        type: StatefulSetUpdateStrategy
      volumeClaimTemplates:
        description: >-
          volumeClaimTemplates is a list of claims that pods are allowed to
          reference. The StatefulSet controller is responsible for mapping
          network identities to claims in a way that maintains the identity of a
          pod. Every claim in this list must have at least one matching (by
          name) volumeMount in one container in the template. A claim in this
          list takes precedence over any volumes in the template, with the same
          name.
        required: false
        type: list
        entry_schema:
          type: core:PersistentVolumeClaim

  ReplicaSetCondition:
    description: >-
      ReplicaSetCondition describes the state of a replica set at a certain
      point.
    properties:
      lastTransitionTime:
        description: The last time the condition transitioned from one status to another.
        required: false
        type: meta:Time
      message:
        description: A human readable message indicating details about the transition.
        required: false
        type: string
      reason:
        description: >-
          The reason for the condition's last transition.
        required: false
        type: string
      status:
        description: Status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: Type of replica set condition.
        required: true
        type: string

  ReplicaSetStatus:
    description: ReplicaSetStatus represents the current status of a ReplicaSet.
    properties:
      availableReplicas:
        description: >-
          The number of available replicas (ready for at least minReadySeconds)
          for this replica set.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      conditions:
        description: >-
          Represents the latest available observations of a replica set's
          current state.
        required: false
        type: list
        entry_schema:
          type: ReplicaSetCondition
      fullyLabeledReplicas:
        description: >-
          The number of pods that have labels matching the labels of the pod
          template of the replicaset.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      observedGeneration:
        description: >-
          ObservedGeneration reflects the generation of the most recently
          observed ReplicaSet.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      readyReplicas:
        description: >-
          readyReplicas is the number of pods targeted by this ReplicaSet with a
          Ready Condition.
        required: false
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]
      replicas:
        description: >-
          Replicas is the most recently oberved number of replicas. More info: h
          ttps://kubernetes.io/docs/concepts/workloads/controllers/replicationco
          ntroller/#what-is-a-replicationcontroller
        required: true
        type: integer
        constraints:
          - in_range: [-2147483648, 2147483647]

