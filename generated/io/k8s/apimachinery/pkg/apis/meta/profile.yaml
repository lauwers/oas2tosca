tosca_definitions_version: tosca_simple_yaml_1_3

# This template was auto-generated by swagger2tosca

namespace: io.k8s.apimachinery.pkg.apis.meta

metadata:
  title: Kubernetes
  version: unversioned

imports:
  - file: io.k8s.apimachinery.pkg.runtime
    namespace_prefix: runtime

data_types:

  Time:
    description: >-
      Time is a wrapper around time.Time which supports correct marshaling
      to YAML and JSON.  Wrappers are provided for many of the factory
      methods that the time package offers.
    derived_from: string
  MicroTime:
    description: MicroTime is version of Time with microsecond level precision.
    derived_from: string
  LabelSelectorRequirement:
    description: >-
      A label selector requirement is a selector that contains values, a
      key, and an operator that relates the key and values.
    properties:
      key:
        description: key is the label key that the selector applies to.
        required: true
        type: string
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid
          operators are In, NotIn, Exists and DoesNotExist.
        required: true
        type: string
      values:
        description: >-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or
          DoesNotExist, the values array must be empty. This array is replaced
          during a strategic merge patch.
        required: false
        type: list
        entry_schema:
          type: string

  LabelSelector:
    description: >-
      A label selector is a label query over a set of resources. The result
      of matchLabels and matchExpressions are ANDed. An empty label selector
      matches all objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The
          requirements are ANDed.
        required: false
        type: list
        entry_schema:
          type: LabelSelectorRequirement
      matchLabels:
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the
          matchLabels map is equivalent to an element of matchExpressions, whose
          key field is "key", the operator is "In", and the values array
          contains only "value". The requirements are ANDed.
        required: false
        type: map
        entry_schema:
          type: string

  FieldsV1:
    description: >-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
      
      Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
      
      The exact format is defined in sigs.k8s.io/structured-merge-diff

  ManagedFieldsEntry:
    description: >-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version
      of the resource that the fieldset applies to.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field set
          because it cannot be automatically converted.
        required: false
        type: string
      fieldsType:
        description: >-
          FieldsType is the discriminator for the different fields format and
          version. There is currently only one possible value: "FieldsV1"
        required: false
        type: string
      fieldsV1:
        description: >-
          FieldsV1 holds the first JSON version format as described in the
          "FieldsV1" type.
        required: false
        type: FieldsV1
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        required: false
        type: string
      operation:
        description: >-
          Operation is the type of operation which lead to this
          ManagedFieldsEntry being created. The only valid values for this field
          are 'Apply' and 'Update'.
        required: false
        type: string
      subresource:
        description: >-
          Subresource is the name of the subresource used to update that object,
          or empty string if the object was updated through the main resource.
          The value of this field is used to distinguish between managers, even
          if they share the same name. For example, a status update will be
          distinct from a regular update using the same manager name. Note that
          the APIVersion field is not related to the Subresource field and it
          always corresponds to the version of the main resource.
        required: false
        type: string
      time:
        description: >-
          Time is timestamp of when these fields were set. It should always be
          empty if Operation is 'Apply'
        required: false
        type: Time

  OwnerReference:
    description: >-
      OwnerReference contains enough information to let you identify an
      owning object. An owning object must be in the same namespace as the
      dependent, or be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        required: true
        type: string
      blockOwnerDeletion:
        description: >-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed. Defaults to false. To set this field, a user
          needs "delete" permission of the owner, otherwise 422 (Unprocessable
          Entity) will be returned.
        required: false
        type: boolean
      controller:
        description: If true, this reference points to the managing controller.
        required: false
        type: boolean
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: true
        type: string
      name:
        description: >-
          Name of the referent. More info: http://kubernetes.io/docs/user-
          guide/identifiers#names
        required: true
        type: string
      uid:
        description: >-
          UID of the referent. More info: http://kubernetes.io/docs/user-
          guide/identifiers#uids
        required: true
        type: string

  ObjectMeta:
    description: >-
      ObjectMeta is metadata that all persisted resources must have, which
      includes all objects users must create.
    properties:
      annotations:
        description: >-
          Annotations is an unstructured key value map stored with a resource
          that may be set by external tools to store and retrieve arbitrary
          metadata. They are not queryable and should be preserved when
          modifying objects. More info: http://kubernetes.io/docs/user-
          guide/annotations
        required: false
        type: map
        entry_schema:
          type: string
      clusterName:
        description: >-
          The name of the cluster which the object belongs to. This is used to
          distinguish resources with same name and namespace in different
          clusters. This field is not set anywhere right now and apiserver is
          going to ignore it if set in create or update request.
        required: false
        type: string
      creationTimestamp:
        description: >-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        required: false
        type: Time
      deletionGracePeriodSeconds:
        description: >-
          Number of seconds allowed for this object to gracefully terminate
          before it will be removed from the system. Only set when
          deletionTimestamp is also set. May only be shortened. Read-only.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      deletionTimestamp:
        description: >-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
          
          Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        required: false
        type: Time
      finalizers:
        description: >-
          Must be empty before the object is deleted from the registry. Each
          entry is an identifier for the responsible component that will remove
          the entry from the list. If the deletionTimestamp of the object is
          non-nil, entries in this list can only be removed. Finalizers may be
          processed and removed in any order.  Order is NOT enforced because it
          introduces significant risk of stuck finalizers. finalizers is a
          shared field, any actor with permission can reorder it. If the
          finalizer list is processed in order, then this can lead to a
          situation in which the component responsible for the first finalizer
          in the list is waiting for a signal (field value, external system, or
          other) produced by a component responsible for a finalizer later in
          the list, resulting in a deadlock. Without enforced ordering
          finalizers are free to order amongst themselves and are not vulnerable
          to ordering changes in the list.
        required: false
        type: list
        entry_schema:
          type: string
      generateName:
        description: >-
          GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
          
          If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
          
          Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
        required: false
        type: string
      generation:
        description: >-
          A sequence number representing a specific generation of the desired
          state. Populated by the system. Read-only.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      labels:
        description: >-
          Map of string keys and values that can be used to organize and
          categorize (scope and select) objects. May match selectors of
          replication controllers and services. More info:
          http://kubernetes.io/docs/user-guide/labels
        required: false
        type: map
        entry_schema:
          type: string
      managedFields:
        description: >-
          ManagedFields maps workflow-id and version to the set of fields that
          are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or understand
          this field. A workflow can be the user's name, a controller's name, or
          the name of a specific apply path like "ci-cd". The set of fields is
          always in the version that the workflow used when modifying the
          object.
        required: false
        type: list
        entry_schema:
          type: ManagedFieldsEntry
      name:
        description: >-
          Name must be unique within a namespace. Is required when creating
          resources, although some resources may allow a client to request the
          generation of an appropriate name automatically. Name is primarily
          intended for creation idempotence and configuration definition. Cannot
          be updated. More info: http://kubernetes.io/docs/user-
          guide/identifiers#names
        required: false
        type: string
      namespace:
        description: >-
          Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
          
          Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
        required: false
        type: string
      ownerReferences:
        description: >-
          List of objects depended by this object. If ALL objects in the list
          have been deleted, this object will be garbage collected. If this
          object is managed by a controller, then an entry in this list will
          point to this controller, with the controller field set to true. There
          cannot be more than one managing controller.
        required: false
        type: list
        entry_schema:
          type: OwnerReference
      resourceVersion:
        description: >-
          An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
          
          Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        required: false
        type: string
      selfLink:
        description: >-
          SelfLink is a URL representing this object. Populated by the system. Read-only.
          
          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        required: false
        type: string
      uid:
        description: >-
          UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
          
          Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        required: false
        type: string

  Condition:
    description: >-
      Condition contains details for one aspect of the current state of this
      API Resource.
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime is the last time the condition transitioned from
          one status to another. This should be when the underlying condition
          changed.  If that is not known, then using the time when the API field
          changed is acceptable.
        required: true
        type: Time
      message:
        description: >-
          message is a human readable message indicating details about the
          transition. This may be an empty string.
        required: true
        type: string
      observedGeneration:
        description: >-
          observedGeneration represents the .metadata.generation that the
          condition was set based upon. For instance, if .metadata.generation is
          currently 12, but the .status.conditions[x].observedGeneration is 9,
          the condition is out of date with respect to the current state of the
          instance.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      reason:
        description: >-
          reason contains a programmatic identifier indicating the reason for
          the condition's last transition. Producers of specific condition types
          may define expected values and meanings for this field, and whether
          the values are considered a guaranteed API. The value should be a
          CamelCase string. This field may not be empty.
        required: true
        type: string
      status:
        description: status of the condition, one of True, False, Unknown.
        required: true
        type: string
      type:
        description: type of condition in CamelCase or in foo.example.com/CamelCase.
        required: true
        type: string

  Preconditions:
    description: >-
      Preconditions must be fulfilled before an operation (update, delete,
      etc.) is carried out.
    properties:
      resourceVersion:
        description: Specifies the target ResourceVersion
        required: false
        type: string
      uid:
        description: Specifies the target UID.
        required: false
        type: string

  DeleteOptions:
    description: DeleteOptions may be provided when deleting an API object.
    metadata:
      x-kubernetes-group-version-kind:
        group: 
        kind: DeleteOptions
        version: v1
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#resources
        required: false
        type: string
      dryRun:
        description: >-
          When present, indicates that modifications should not be persisted. An
          invalid or unrecognized dryRun directive will result in an error
          response and no further processing of the request. Valid values are: -
          All: all dry run stages will be processed
        required: false
        type: list
        entry_schema:
          type: string
      gracePeriodSeconds:
        description: >-
          The duration in seconds before the object should be deleted. Value
          must be non-negative integer. The value zero indicates delete
          immediately. If this value is nil, the default grace period for the
          specified type will be used. Defaults to a per object value if not
          specified. zero means delete immediately.
        required: false
        type: integer
        constraints:
          - in_range: [-9223372036854775808, 9223372036854775807]
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/sig-architecture/api-
          conventions.md#types-kinds
        required: false
        type: string
      orphanDependents:
        description: >-
          Deprecated: please use the PropagationPolicy, this field will be
          deprecated in 1.7. Should the dependent objects be orphaned. If
          true/false, the "orphan" finalizer will be added to/removed from the
          object's finalizers list. Either this field or PropagationPolicy may
          be set, but not both.
        required: false
        type: boolean
      preconditions:
        description: >-
          Must be fulfilled before a deletion is carried out. If not possible, a
          409 Conflict status will be returned.
        required: false
        type: Preconditions
      propagationPolicy:
        description: >-
          Whether and how garbage collection will be performed. Either this
          field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers
          and the resource-specific default policy. Acceptable values are:
          'Orphan' - orphan the dependents; 'Background' - allow the garbage
          collector to delete the dependents in the background; 'Foreground' - a
          cascading policy that deletes all dependents in the foreground.
        required: false
        type: string

